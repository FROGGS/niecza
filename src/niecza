use MONKEY_TYPING;
use CClass;
use CgOp;
use GetOptLong;
use NieczaActions;
use NieczaBackendDotnet;
use NieczaCompiler;
use NieczaFrontendSTD;
use NieczaPassSimplifier;
use NieczaPathSearch;
use Op;
use Operator;
use OpHelpers;
use OptBeta;
use OptRxSimple;
use RxOp;
use Sig;
use STD;

# augment class RxOp {
# method oplift() {
#     say "oplift: {self.typename}";
#     my $i = 0;
#     map { say $i++; .oplift }, @$!zyg
# }
# }

augment class RxOp::Capturing {
    method used_caps() {
        my %h = map { ($_ => $*in_quant ?? 2 !! 1) }, @$.captures;

        for @$.zyg -> $k {
            for $k.used_caps.pairs -> $p {
                %h{$p.key} = (%h{$p.key} // 0) + $p.value;
            }
        }

        %h
    }
}

augment class Op::ImmedForLoop {
    method code_labelled($body, $l) {
        my $id = ::GLOBAL::NieczaActions.genid;

        CgOp.rnull(CgOp.letn(
            "!iter$id", CgOp.start_iter($.source.cgop($body)),
            (map { $_, CgOp.null('var') }, @$.var),
            CgOp.label("again$id"),
            (map {
                CgOp.ncgoto("last$id",
                    CgOp.iter_hasflat(CgOp.letvar("!iter$id"))),
                CgOp.letvar($_, CgOp.vvarlist_shift(CgOp.letvar("!iter$id")))
            }, @$.var),
            CgOp.sink(CgOp.xspan("redo$id", "next$id", 0,
                $.sink.cgop($body),
                1, $l, "next$id",
                2, $l, "last$id",
                3, $l, "redo$id")),
            CgOp.goto("again$id"),
            CgOp.label("last$id")));
    }
}

augment class NieczaActions {
method parameter($/) {
    my $type;
    my $sorry;
    my $p = $<param_var> // $<named_param>;
    my $p_ast = $p ?? $p.ast !! { names => [], flags => $Sig::POSITIONAL };
    my $flags = $p_ast<flags>;

    $flags +|= $Sig::READWRITE if $*SIGNUM && $*CURLEX<!rw_lambda>;

    if $<type_constraint> {
        ($type) = self.process_name($<type_constraint>[0]<typename><longname>);
    }

    for @( $<trait> ) -> $trait {
        if $trait.ast<rw> { $flags +|= $Sig::READWRITE }
        elsif $trait.ast<copy> { $flags +|= $Sig::IS_COPY }
        elsif $trait.ast<parcel> { $flags +|= $Sig::RWTRANS }
        elsif $trait.ast<readonly> { $flags +&= +^$Sig::READWRITE }
        else {
            $trait.CURSOR.sorry('Unhandled trait ' ~ $trait.ast.keys.[0]);
        }
    }

    if $<post_constraint> > 0 {
        $/.sorry('Parameter post constraints NYI');
        make ::Sig::Parameter.new;
        return Nil;
    }

    my $default = $<default_value> ?? $<default_value>.ast !! Any;
    $default.set_name("$/ init") if $default;

    my $tag = $<quant> ~ ':' ~ $<kind>;
    if    $tag eq '**:*' { $sorry = "Slice parameters NYI" }
    elsif $tag eq '*:*'  { $flags +|= ($flags +& $Sig::IS_HASH) ?? $Sig::SLURPY_NAM !! $Sig::SLURPY_POS }
    elsif $tag eq '|:*'  { $flags +|= $Sig::SLURPY_CAP }
    elsif $tag eq '\\:!' { $flags +|= $Sig::RWTRANS }
    elsif $tag eq '\\:?' { $flags +|= ($Sig::RWTRANS + $Sig::OPTIONAL) }
    elsif $tag eq ':!'   { }
    elsif $tag eq ':*'   { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq ':?'   { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq '?:?'  { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq '!:!'  { }
    elsif $tag eq '!:?'  { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq '!:*'  { }
    else                 { $sorry = "Confusing parameters ($tag)" }
    if $sorry { $/.CURSOR.sorry($sorry); }

    if defined $p_ast<slot> {
        # TODO: type constraint here
    }

    make ::Sig::Parameter.new(name => ~$/, mdefault => $default,
        tclass => $type, |$p_ast, :$flags);
}
method post_backslash($/) {
    # XXX confine $/ resetting
    sub _isupper { $_ ~~ /^<[ A .. Z ]>/ }
    sub _islower { $_ ~~ /^<[ a .. z ]>/ }
    if $/.ast.^isa(CClass) {
        make self.cclass_cc($/.ast);
    }
    if _isupper($/) && _islower($<sym>) {
        if $/.ast.^isa(Str) {
            make self.string_cc($/.ast);
        }
        make self.negate_cc($/.ast);
    }
}
}

# remove run_dispatch
CgOp._register_ops: < who sc_root sc_indir temporize _addmethod _invalidate
    rxlprim
>;

my $usage = q:to/EOM/;
niecza -- a command line wrapper for Niecza

usage: niecza -e 'code'      # run a one-liner
   OR: niecza file.pl [args] # run a program
   OR: niecza -C MyModule    # precompile a module
   OR: niecza                # interactive shell

general options:
   -n                        # short for -L CORN
   -p                        # short for -L CORP
   -B --backend=NAME         # select backend (dotnet)
   -L --language=NAME        # select your setting
   -I --include=DIR          # add a directory to search for modules
   -v --verbose              # detailed timing info
   -c --compile              # don't run (implied with -C)
      --safe                 # disable system interaction
      --help                 # display this message

backend options:
      --obj-dir=DIR          # select output location (all)
EOM

my $runobj = Q:CgOp { (box Str (rawcall get_BaseDirectory (rawscall System.AppDomain.get_CurrentDomain))) };
my $basedir = $runobj.IO.append("..").realpath;

my @lib  = $basedir.append("lib"), ".".IO.realpath;
my $lang = "CORE";
my $safe = False;
my $bcnd = "dotnet";
my $odir = $basedir.append("obj");
my $verb = 0;
my @eval;
my $cmod = False;
my $comp = False;
my $version = False;

GetOptions(:!permute,
    "evaluate|e=s" => sub { push @eval, $_ },
    "compile-module|C" => sub { $cmod = True },
    "backend|B=s" => sub { $bcnd = $_ },
    "language|L=s" => sub { $lang = $_ },
    "p" => sub { $lang = "CORP" },
    "n" => sub { $lang = "CORN" },
    "verbose" => sub { $verb++ },
    "version|v" => sub { $version = True },
    "compile|c" => sub { $comp = True },
    "safe" => sub { $safe = True },
    "include|I=s" => sub { unshift @lib, $_.IO.realpath },
    "obj-dir=s" => sub { $odir = $_ },
    "help|h" => sub { say $usage; exit 0 },
);

my @*INC;
my $backend;
if $bcnd eq 'dotnet' || $bcnd eq 'mono' {
    $backend = NieczaBackendDotnet.new(obj_dir => $odir, safemode => $safe);
}
else {
    note "Backend '$bcnd' not supported";
    exit 1;
}

my $c = NieczaCompiler.new(
    module_finder => NieczaPathSearch.new(
        path => @lib,
    ),
    frontend => NieczaFrontendSTD.new(
        lang => $lang,
        safemode => $safe,
    ),
    backend => $backend,
    verbose => $verb,
);

if $version {
    $c.compile_string('say "This is Niecza Perl 6 {$?PERL<version>}"', True);
    exit 0;
}

if $cmod {
    if @eval {
        note "Module compilation cannot be used with strings to evaluate";
        exit 1;
    }
    if !@*ARGS {
        say "No modules named to compile!";
        exit 0;
    }
    for @*ARGS {
        $c.compile_module($_);
    }
}
elsif @eval {
    $c.backend.run_args = @*ARGS;
    for @eval {
        $c.compile_string($_, !$comp);
    }
}
elsif @*ARGS {
    my $file = shift @*ARGS;
    $c.backend.run_args = @*ARGS;
    $c.compile_file($file, !$comp);
}
else {
    my $*repl_outer;
    my $*repl_outer_frame;
    $c.compile_string('$PROCESS::OUTPUT_USED ::= True', !$comp, :repl,
        :evalmode);
    while True {
        print "niecza> ";
        my $l = $*IN.get // last;
        my $ok;
        try {
            $c.compile_string($l, !$comp, :repl, :evalmode,
                :outer($*repl_outer), :outer_frame($*repl_outer_frame));
            $ok = True;
        }
        say $! unless $ok;
    }
    say "";
}
