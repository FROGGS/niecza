# vim: ft=perl6
use MONKEY_TYPING;

use STD;
use Stash;
use NAME;
use JSYNC;

my %item_assignment = (:dba('item assignment') , :prec<i=>, :assoc<right>, :!pure);

augment class Cursor {
    method suppose($rx) {
        my $*IN_SUPPOSE = True;
        my $*FATALS = 0;
        my @*WORRIES;
        my %*WORRIES;
        my $*HIGHWATER = -1;
        my $*HIGHEXPECT = {};
        try {
            my $ret = first($rx(self));
            if ($ret) { return $ret }
        };
        return ();
    }
}

augment class List {
    method push(\|$args) { Q:CgOp {
        (letn iter (vvarlist_from_fvarlist (unbox fvarlist (@ {$args})))
              targ (getslot rest vvarlist (@ {self}))
          (vvarlist_shift (l iter))
          (ternary (== (i 0) (vvarlist_count (l targ)))
            (l targ (getslot items vvarlist (@ {self})))
            (prog))
          (whileloop 0 0 (iter_hasflat (l iter))
            (vvarlist_push (l targ) (vvarlist_shift (l iter))))
          {Nil})
    } }

    method head() { Q:CgOp {
        (letn items (getslot items vvarlist (@ {self}))
              rest  (getslot rest  vvarlist (@ {self}))
          (ternary (!= (i 0) (vvarlist_count (l items)))
            (vvarlist_item (i 0) (l items))
            (ternary (iter_hasarg (l rest))
              (prog
                (vvarlist_push (l items) (vvarlist_shift (l rest)))
                (vvarlist_item (i 0) (l items)))
              {Any})))
    } }
    method eager() { Q:CgOp {
        (letn items (getslot items vvarlist (@ {self}))
              rest  (getslot rest  vvarlist (@ {self}))
          (whileloop 0 0 (iter_hasarg (l rest))
            (vvarlist_push (l items) (vvarlist_shift (l rest))))
          {self})
    } }
}

augment class Match {
    method trim_heredoc () { self } # NYI
}

augment class Hash {
    method LISTSTORE(\$in) {
        Q:CgOp {
            (letn iter (vvarlist_new_empty)
                  into (varhash_new)
                  sobj (@ {self})
              (vvarlist_push (l iter) {$in})
              (whileloop 0 0 (iter_hasflat (l iter))
                (letn elt (@ (vvarlist_shift (l iter)))
                  (varhash_setindex (obj_getstr (getslot key var (l elt)))
                    (l into) (nsw (@ (getslot value var (l elt)))))))
              (setbox (l sobj) (l into))
              (newrwlistvar (l sobj)))
        };
    }

    method at-key(\$self: $key) {
        Q:CgOp {
            (letn ky (obj_getstr {$key})
              (ternary (obj_is_defined (@ {$self}))
                (letn vh (unbox varhash (@ {$self}))
                  (ternary (varhash_contains_key (l vh) (l ky))
                    (varhash_getindex (l ky) (l vh))
                    (newvhashvar (class_ref mo Any) (@ {$self}) (l ky) (@ {Any}))))
                (newvnewhashvar (class_ref mo Any) {$self} (l ky) (@ {Any}))))
        };
    }
}

sub _vivify_array_at_pos(\$self, $ix) {
    Q:CgOp { (newvnewarrayvar (class_ref mo Any) {$self} (cast int (obj_getnum {$ix})) (@ {Any})) };
}

augment class Any {
    method at-key(\$self: $key) {
        defined($self) ??
            die("Cannot use hash access on an object of type $self.typename()") !!
            Q:CgOp { (newvnewhashvar (class_ref mo Any) {$self} (obj_getstr {$key}) (@ {Any})) };
    }

    method at-pos(\$self: $ix) {
        defined($self)
            ?? ($ix == 0 ?? $self !! die("Invalid index for non-array"))
            !! _vivify_array_at_pos($self, $ix)
    }
}

augment class Cool {
    method at-pos(\$self: $ix) {
        defined($self)
            ?? $self.list.at-pos($ix)
            !! _vivify_array_at_pos($self, $ix)
    }
}

augment class List {
    method at-pos(\$self: $ix) {
        Q:CgOp {
            (letn self (@ {$self})
                  ixn  (cast int (obj_getnum {$ix}))
              (ternary (obj_is_defined (l self))
                (letn items (getslot items vvarlist (l self))
                      rest  (getslot rest  vvarlist (l self))
                  (ternary (< (l ixn) (vvarlist_count (l items)))
                    (vvarlist_item (l ixn) (l items))
                    (ternary (== (i 0) (vvarlist_count (l rest)))
                      {Any}
                      {$self!List::fill($ix+1); $self.at-pos($ix)})))
                {_vivify_array_at_pos($self,$ix)}))
        };
    }
}

augment class Array {
    method at-pos(\$self: $ix) {
        Q:CgOp {
            (letn self (@ {$self})
                  ixn  (cast int (obj_getnum {$ix}))
              (ternary (obj_is_defined (l self))
                (letn items (getslot items vvarlist (l self))
                      rest  (getslot rest  vvarlist (l self))
                  (ternary (< (l ixn) (vvarlist_count (l items)))
                    (vvarlist_item (l ixn) (l items))
                    (ternary (== (i 0) (vvarlist_count (l rest)))
                      (newvarrayvar (class_ref mo Any) (l self) (l ixn) (@ {Any}))
                      {$self!List::fill($ix+1); $self.at-pos($ix)})))
                {_vivify_array_at_pos($self,$ix)}))
        };
    }
}


package Niecza {
    grammar Grammar is STD {
        grammar CgOp is STD {
            rule nibbler { <cgexp> }

            token category:cgexp { <sym> }
            proto token cgexp {*}

            token cgopname { <-[ ' " ( ) { } \[ \] \s ]> + }

            token cgexp:op { <[ ( \[ ]>:s {} <cgopname> [ <cgexp> ]* <[ ) \] ]> }
            token cgexp:name { <cgopname> }
            token cgexp:quote { <?before <[ ' " ]>> {} [ :lang(%*LANG<MAIN>) <quote> ] }
            token cgexp:decint { <decint> }
            token cgexp:p6exp { :lang(%*LANG<MAIN>) '{' ~ '}' <statementlist> }
            token cgexp:bad { <!before <[ ) \] ]> > {}
                [ <?stdstopper> <.panic "Missing cgop"> ]
                <.panic: "Unparsable cgop">
            }
        }

        grammar Q is STD::Q { #} {
            method tweak(:$CgOp, *%_) {
                if $CgOp.defined { self.cursor_fresh(Niecza::Grammar::CgOp) }
                else { nextwith(self, |%_) }
            }
        }

        grammar P6 is STD::P6 {
            method unitstart() {
                %*LANG<Q> = Niecza::Grammar::Q ;
                %*LANG<MAIN> = Niecza::Grammar::P6 ;
                self;
            }
        }

        method p6class () { Niecza::Grammar::P6 }
    }
}


augment class STD {
    our $ALL;
method getsig {
    my $pv = $*CURLEX.{'%?PLACEHOLDERS'};
    my $sig;
    if $*CURLEX.<!NEEDSIG>:delete {
        if $pv {
            my $h_ = $pv.<%_>:delete;
            my $a_ = $pv.<@_>:delete;
            $sig = join ', ', (keys %$pv).sort({ substr($^a,1) leg substr($^b,1) });
            $sig ~= ', *@_' if $a_;
            $sig ~= ', *%_' if $h_;
        }
        else {
            $sig = '$_ is ref = OUTER::<$_>';
        }
        $*CURLEX.<$?SIGNATURE> = $sig;
    }
    else {
        $sig = $*CURLEX.<$?SIGNATURE>;
    }
    # NIECZA immutable cursors
    # self.<sig> = $sig;
    # self.<lex> = $*CURLEX.idref;
    if ($*DECLARAND<mult>//'') ne 'proto' {
        for keys %$*CURLEX {
            my $desc = $*CURLEX{$_};
            next if $_ eq '$_' or $_ eq '@_' or $_ eq '%_';
            next if $desc !~~ Hash;
            next if $desc<used>;
            next if $desc<rebind>;
            next if $desc<dynamic>;
            next if $desc<scope> eq 'state';
            next if $desc<stub>;
            next unless $_ ~~ /<[\$\@\%\&]>\w/;
            my $pos = $desc<declaredat> // self.pos;
            self.cursor($pos).worry("$_ is declared but not used");
        }
    }
    self;
}
token ws {
    :my $startpos = Q:CgOp { (box Num (cast num (cursor_pos (cast cursor (@ {self}))))) };
    :my $startmemo = @*MEMOS[$startpos];
    :my $stub = return self if $startmemo<ws> :exists; #OK

    :dba('whitespace')
    \h+ <![\#\s\\]> { @*MEMOS[$¢.pos]<ws> = $startpos; }   # common case
    || <?before \w> <?after \w> :::
            { @*MEMOS[$startpos]<ws>:delete; }
            <.sorry: "Whitespace is required between alphanumeric tokens">        # must \s+ between words
    ||
    [
    | <.unsp>
    | <.vws> <.heredoc>
    | <.unv>
    # | $ { $¢.moreinput }  NIECZA break inf loop
    ]*

    # NOTE that this is only used in the slow path!  The || above is the
    # top level separator.
    {
        my $pos = $¢.pos;
        my $memo = @*MEMOS[$pos];
        if ($pos == $startpos) {
            $memo<ws>:delete;
        }
        else {
            $memo<ws> = $startpos;
            $memo<endstmt> = $startmemo<endstmt> if $startmemo<endstmt> :exists;
        }
    }
}
method lookup_dynvar($name) { Any } # NYI
method check_old_cclass($text) { } # NYI
method do_use($module,$args) {
    self.do_need($module);
    self.do_import($module,$args);
    self;
}

method do_need($mo) {
    my $module = $mo.Str;
    my $topsym;
    try { $topsym = self.sys_load_modinfo($module); }
    if !$topsym {
        self.panic("Could not load $module");
    }
    self.add_my_name($module);
    $*DECLARAND<really> = $topsym;
    self;
}

method sys_load_modinfo($module) {
    # TODO: Implement compile-on-demand.  Requires some kind of modtime API.
    from-jsync(slurp($module ~ ".syml"));
}

method load_lex($setting) {
    if $setting eq 'NULL' {
        my $id = "MY:file<NULL.pad>:line(1):pos(0)";
        my $core = Stash.new('!id' => [$id], '!file' => 'NULL.pad',
            '!line' => 1);
        return Stash.new('CORE' => $core, 'MY:file<NULL.pad>' => $core,
            'SETTING' => $core, $id => $core);
    }

    return Stash.new(%( from-jsync(slurp($setting ~ ".syml")) ));
}
}

augment class STD::P6 {
    token infixish ($in_meta?) {
        :my ($infix, $O, $sym);
        :temp $*IN_META;
        :my $stub = ($*IN_META = $*IN_META // $in_meta); #OK not used
        <!stdstopper>
        <!infixstopper>
        :dba('infix or meta-infix')
        [
        | <colonpair> $<fake> = {1} { $sym = ':' }
            { $O = {:prec(%item_assignment<prec>), :assoc<unary>,
                :dba<adverb> } }
                # actual test is non-inclusive!
        |   [
            | :dba('bracketed infix') '[' ~ ']' <infix=.infixish('[]')> { $O = $<infix><O>; $sym = $<infix><sym> }
            | <infix=infix_circumfix_meta_operator> { $O = $<infix><O>; $sym = $<infix><sym>; }
            | <infix=infix_prefix_meta_operator>    { $O = $<infix><O>; $sym = $<infix><sym>; }
            | <infix>                               { $O = $<infix><O>; $sym = $<infix><sym>; }
            | {} <?dotty> <.panic: "Method call found where infix expected (omit whitespace?)">
            | {} <?postfix> <.panic: "Postfix found where infix expected (omit whitespace?)">
            ]
            [ <?before '='> <assign_meta_operator($<infix>)>
                   {$O = $<assign_meta_operator>[0]<O>}
                   {$sym = $<assign_meta_operator>[0]<sym>}
            ]?

        ]
        $<O> = { $O } $<sym> = { $sym }
    }
}

augment class Cursor {
    our $RED    = "\e[31m";
    our $GREEN  = "\e[32m";
    our $YELLOW = "\e[33m";
    our $CLEAR  = "\e[37m";
}

sub compiler(:$filename, :$text, :$settingname, :$niecza) {
    my $*SETTINGNAME = $settingname;
    my @*MEMOS;
    my $*FILE = { name => $filename };
    my @*ACTIVE;
    my $*HIGHWATER = 0;
    my $*HIGHEXPECT = {};
    my $*HIGHMESS = "";
    my $*LASTSTATE = 0;
    my $*IN_PANIC = 0;
    my $*IN_SUPPOSE = 0;
    my $*FATALS = 0;

    $DEBUG::EXPR = False;
    $STD::DEBUG::EXPR = False;
    $STD::DEBUG::symtab = False;

    my $*LAST_NIBBLE = 0;
    my $*LAST_NIBBLE_START = 0;
    my $*LAST_NIBBLE_MULTILINE = 0;
    my $*LAST_NIBBLE_MULTILINE_START = 0;
    my $*GOAL = "(eof)";
    my $*SETTING; my $*CORE; my $*GLOBAL; my $*UNIT; my $*YOU_WERE_HERE;
    my $*CCSTATE; my $*BORG; my %*RX; my $*XACT; my $*VAR; my $*IN_REDUCE;
    ($niecza ?? Niecza::Grammar !! STD).parse($text);

    my $all;

    # setting?
    if $*YOU_WERE_HERE {
        $all = $STD::ALL;
        $all<SETTING> = $*YOU_WERE_HERE;
        $all<CORE> = $*YOU_WERE_HERE if $*UNIT<$?LONGNAME> eq 'CORE';
        my %keepname;
        my $ptr = 'SETTING';
        while $all{$ptr}:exists {
            %keepname{$ptr} = True;
            %keepname{$all{$ptr}.id} = True;
            #say "Keeping $ptr";
            $ptr = $all{$ptr}<OUTER::>[0];
            #say "Moving cursor to $ptr";
        }
        for keys %$all -> $key {
            if $key ~~ /^MY/ && $key !~~ /\:\:/ && !%keepname{$key} {
                $all{$key}:delete;
            }
        }
    }
    else {
        $all = {};
        for keys %( $STD::ALL ) -> $key {
            next if (/MY\:file\<\w+:\.setting\>/)(Cursor.new($key)) or $key eq 'CORE' or $key eq 'SETTING';
            $all{$key} = $STD::ALL{$key};
        }
    }

    $all
}

if !@*ARGS {
    note "Usage: tryfile.exe [--symbols]? [--niecza]? [--setting NAME]? [-e TEXT | FILENAME | -]";
    exit 1;
}

my $symbols = False;
my $setting = 'CORE';
my $niecza = False;
if @*ARGS[0] eq '--symbols' {
    $symbols = True;
    shift @*ARGS;
}
if @*ARGS[0] eq '--niecza' {
    $niecza = True;
    shift @*ARGS;
}
if @*ARGS[0] eq '--setting' {
    shift @*ARGS;
    $setting = shift @*ARGS;
}

my $out;
if @*ARGS[0] eq '-' {
    $out = compiler(filename => '(eval)', text => $*IN.slurp, settingname => $setting, niecza => $niecza);
} elsif @*ARGS[0] eq '-e' {
    $out = compiler(filename => '(eval)', text => @*ARGS[1], settingname => $setting, niecza => $niecza);
} else {
    $out = compiler(filename => @*ARGS[0], text => slurp(@*ARGS[0]), settingname => $setting, niecza => $niecza);
}

if $symbols {
    say to-jsync($out);
} else {
    say "OK"
}
