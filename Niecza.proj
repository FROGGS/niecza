<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
    ToolsVersion="4.0">
    <PropertyGroup>
        <Subversion>svn</Subversion>
        <Make>make</Make>
        <Perl>perl</Perl>
        <STDUrl>http://svn.pugscode.org/pugs/src/perl6</STDUrl>

        <!-- infrastructure -->
        <STD_existed Condition="Exists('STD_checkout')">Y</STD_existed>
    </PropertyGroup>

    <ItemGroup>
        <CompilerPerl Include="Body.pm;CgOp.pm;CodeGen.pm;CompilerDriver.pm;Decl.pm;Op.pm;RxOp.pm;Sig.pm;Unit.pm;Niecza\Actions.pm;Niecza\Grammar.pmc;.STD_build_stamp"/>
    </ItemGroup>

    <Target Name="Default" DependsOnTargets="CORE.dll"/>

    <Target Name="SafeMode" DependsOnTargets="SAFE.dll"/>

    <Target Name="Test" DependsOnTargets="CORE.dll;Test.dll">
        <Exec Command="perl niecza_eval --stop-after=cswrite test.pl"/>
        <Csc Sources="MAIN.cs" TargetType="exe" OutputAssembly="MAIN.exe"
            References="Test.dll;CORE.dll;Kernel.dll"/>
        <Exec Command="prove -e mono MAIN.exe"/>
    </Target>

    <Target Name="Kernel.dll" Inputs="Kernel.cs" Outputs="Kernel.dll">
        <Csc Sources="Kernel.cs" TargetType="library"
            OutputAssembly="Kernel.dll"/>
        <Exec Command="mono --aot Kernel.dll"/>
    </Target>

    <Target Name="Grammar" Inputs="Niecza\Grammar.pm6" Outputs="Niecza\Grammar.pmc" DependsOnTargets="BuildSTD">
        <Exec Command="STDBASE=`pwd`/STD_checkout; PERL5LIB=$STDBASE PERL6LIB=$STDBASE:$STDBASE/lib STD5PREFIX=$STDBASE/ $STDBASE/viv -5 -o Niecza/Grammar.pmc Niecza/Grammar.pm6"/>
    </Target>

    <Target Name="CORE.cs" Inputs="@(CompilerPerl);SAFE_ast.store;CORE.setting" Outputs="CORE.cs;CORE_ast.store" DependsOnTargets="BuildSTD;SAFE.cs;Grammar">
        <Exec Command="perl niecza_eval --stop-after=writecs -L SAFE -c CORE.setting"/>
    </Target>

    <Target Name="SAFE.cs" Inputs="@(CompilerPerl);SAFE.setting" Outputs="SAFE.cs;SAFE_ast.store" DependsOnTargets="BuildSTD;Grammar">
        <Exec Command="perl niecza_eval --stop-after=writecs -L NULL -c SAFE.setting"/>
    </Target>

    <Target Name="Test.cs" Inputs="@(CompilerPerl);CORE_ast.store;Test.pm6" Outputs="Test.cs;Test_ast.store" DependsOnTargets="CORE.cs;BuildSTD;Grammar">
        <Exec Command="perl niecza_eval --stop-after=writecs -c Test.pm6"/>
    </Target>

    <Target Name="CORE.dll" Inputs="CORE.cs;SAFE.dll;Kernel.dll" Outputs="CORE.dll" DependsOnTargets="CORE.cs;SAFE.dll;Kernel.dll">
        <Csc Sources="CORE.cs" TargetType="library"
            OutputAssembly="CORE.dll" References="SAFE.dll;Kernel.dll"/>
        <Exec Command="mono --aot CORE.dll"/>
    </Target>

    <Target Name="SAFE.dll" Inputs="SAFE.cs;Kernel.dll" Outputs="SAFE.dll" DependsOnTargets="SAFE.cs;Kernel.dll">
        <Csc Sources="SAFE.cs" TargetType="library"
            OutputAssembly="SAFE.dll" References="Kernel.dll"/>
        <Exec Command="mono --aot SAFE.dll"/>
    </Target>

    <Target Name="Test.dll" Inputs="Test.cs;CORE.dll;Kernel.dll" Outputs="Test.dll" DependsOnTargets="Test.cs;CORE.dll;Kernel.dll">
        <Csc Sources="Test.cs" TargetType="library"
            OutputAssembly="Test.dll" References="CORE.dll;Kernel.dll"/>
        <Exec Command="mono --aot Test.dll"/>
    </Target>

    <Target Name="CheckoutSTD" Inputs="STD_REVISION"
        Outputs=".STD_checkout_stamp">
        <ReadLinesFromFile File="STD_REVISION">
            <Output TaskParameter="Lines" ItemName="StdRevision"/>
        </ReadLinesFromFile>
        <Exec Condition="$(STD_existed) != 'Y'"
            Command="$(Subversion) checkout $(STDUrl)@@(StdRevision) STD_checkout"/>
        <Exec Condition="$(STD_existed) == 'Y'"
            Command="$(Subversion) update -r@(StdRevision) STD_checkout"/>
        <Touch AlwaysCreate="true" Files=".STD_checkout_stamp"
            ContinueOnError="true"/>
    </Target>

    <Target Name="BuildSTD" Inputs=".STD_checkout_stamp"
        Outputs=".STD_build_stamp" DependsOnTargets="CheckoutSTD">
        <Exec WorkingDirectory="STD_checkout" Command="$(Make)"/>
        <Exec WorkingDirectory="STD_checkout" Command="$(Perl) tryfile STD.pm6"/>
        <Touch AlwaysCreate="true" Files=".STD_build_stamp"
            ContinueOnError="true"/>
    </Target>
</Project>
