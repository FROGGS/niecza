use MONKEY_TYPING;
use CClass;
use CgOp;
use GetOptLong;
use NieczaActions;
use NieczaBackendDotnet;
use NieczaCompiler;
use NieczaFrontendSTD;
use NieczaPassSimplifier;
use NieczaPathSearch;
use Op;
use Operator;
use OpHelpers;
use OptBeta;
use OptRxSimple;
use RxOp;
use Sig;
use STD;

augment grammar STD {
method nibbler() {
    my @nibbles;
    my $from = self.pos;
    my $len = self.orig.chars;
    my $to = $from;

    loop {
        my $here = self.cursor($to);
        last if head($here.stopper);

        if head($here.starter) -> $starter {
            push @nibbles, Match.synthetic(:cursor(self), :$from, :$to,
                :method<Str>, :captures()) if $from != $to;

            my $nibbler = head(self.cursor($starter.to).nibbler) or return;
            my $stopper = head(self.cursor($nibbler.to).stopper) or return;

            $from = $to = $stopper.to;
            push @nibbles, $starter;
            push @nibbles, @( $nibbler<nibbles> );
            push @nibbles, $stopper;
        }
        elsif head($here.escape) -> $escape {
            push @nibbles, Match.synthetic(:cursor(self), :$from, :$to,
                :method<Str>, :captures()) if $from != $to;

            $from = $to = $escape.to;
            push @nibbles, $escape;
        }
        elsif $to < $len {
            $to++;
        }
        else { # at end, and not stopper
            return;
        }
    }

    push @nibbles, Match.synthetic(:cursor(self), :$from, :$to,
        :method<Str>, :captures()) if $from != $to || !@nibbles;

    $*LAST_NIBBLE = $to;
    $*LAST_NIBBLE_START = self.pos;
    if defined substr(self.orig, self.pos, $to - self.pos).index("\n") {
        $*LAST_NIBBLE_MULTILINE = $to;
        $*LAST_NIBBLE_MULTILINE_START = self.pos;
    }

    Match.synthetic(:cursor(self), from => self.pos, :$to, :method<nibbler>,
        :captures(nibbles => @nibbles))
}
}

augment class RxOp::Sym {
    method clone(:$captures) {
        self.WHAT.new(text => $!text, igcase => $!igcase, igmark => $!igmark,
            endsym => $!endsym, :$captures);
    }
}

augment class NieczaActions {
method statement_prefix:BEGIN ($/) {
    # MAJOR HACK - allows test code like BEGIN { @*INC.push: ... } to work
    repeat while False {
        my $c = ($<blast><statement> || $<blast><block><blockoid>).ast;

        last unless $c ~~ Op::StatementList;
        last unless $c.children == 1;
        my $d = $c.children.[0];
        last unless $d ~~ Op::CallMethod;
        last unless $d.receiver ~~ Op::ContextVar;
        last unless $d.receiver.name eq '@*INC';
        last if $d.private || $d.ismeta;
        last unless $d.name eq any <push unshift>;
        last unless +$d.getargs == 1;
        last unless defined my $str = self.trivial_eval($/, $d.getargs.[0]);
        @*INC."$d.name()"($str);
        make ::Op::StatementList.new;
        return;
    }

    $*CURLEX<!sub>.create_static_pad;
    $<blast>.ast.run_BEGIN;
    make ::Op::StatementList.new;
}
method blockoid($/) {
    # XXX horrible cheat, but my data structures aren't up to the task of
    # $::UNIT being a class body &c.
    if $/ eq '{YOU_ARE_HERE}' {
        $*unit.set_bottom($*CURLEX<!sub>);
        $*CURLEX<!sub>.create_static_pad;
        $*CURLEX<!sub>.noninlinable;

        loop (my $l = $*CURLEX<!sub>; $l; $l.=outer) {
            # this isn't *quite* right, as it will cause declaring
            # anything more in the same scope to fail.
            # ... and we have to be careful not to mark anon_0 used
            # or installing this very block will fail!
            substr($_,0,4) ne 'anon' and $/.CURSOR.mark_used($_)
                for $l.lex_names;
        }

        make ::Op::YouAreHere.new(|node($/), unitname => $*UNITNAME);
    } else {
        make $<statementlist>.ast;
    }
}
}

CgOp._register_ops: < who sc_root sc_indir temporize _addmethod _invalidate
>;

my $usage = q:to/EOM/;
niecza -- a command line wrapper for Niecza

usage: niecza -e 'code'      # run a one-liner
   OR: niecza file.pl [args] # run a program
   OR: niecza -C MyModule    # precompile a module
   OR: niecza                # interactive shell

general options:
   -n                        # short for -L CORN
   -p                        # short for -L CORP
   -B --backend=NAME         # select backend (dotnet)
   -L --language=NAME        # select your setting
   -v --verbose              # detailed timing info
   -c --compile              # don't run (implied with -C)
      --safe                 # disable system interaction
      --help                 # display this message

backend options:
      --obj-dir=DIR          # select output location (all)
EOM

my $runobj = Q:CgOp { (box Str (rawcall get_BaseDirectory (rawscall System.AppDomain.get_CurrentDomain))) };
my $basedir = $runobj.IO.append("..").realpath;

my @lib  = $basedir.append("lib"), ".".IO.realpath;
my $lang = "CORE";
my $safe = False;
my $bcnd = "dotnet";
my $odir = $basedir.append("obj");
my $verb = 0;
my @eval;
my $cmod = False;
my $comp = False;

GetOptions(:!permute,
    "evaluate|e=s" => sub { push @eval, $_ },
    "compile-module|C" => sub { $cmod = True },
    "backend|B=s" => sub { $bcnd = $_ },
    "language|L=s" => sub { $lang = $_ },
    "p" => sub { $lang = "CORP" },
    "n" => sub { $lang = "CORN" },
    "verbose|v" => sub { $verb++ },
    "compile|c" => sub { $comp = True },
    "safe" => sub { $safe = True },
    "include|I=s" => sub { unshift @lib, $_.IO.realpath },
    "obj-dir=s" => sub { $odir = $_ },
    "help|h" => sub { say $usage; exit 0 },
);

my @*INC;
my $backend;
if $bcnd eq 'dotnet' || $bcnd eq 'mono' {
    $backend = NieczaBackendDotnet.new(obj_dir => $odir, safemode => $safe);
}
else {
    note "Backend '$bcnd' not supported";
    exit 1;
}

my $c = NieczaCompiler.new(
    module_finder => NieczaPathSearch.new(
        path => @lib,
    ),
    frontend => NieczaFrontendSTD.new(
        lang => $lang,
        safemode => $safe,
    ),
    backend => $backend,
    verbose => $verb,
);

if $cmod {
    if @eval {
        note "Module compilation cannot be used with strings to evaluate";
        exit 1;
    }
    if !@*ARGS {
        say "No modules named to compile!";
        exit 0;
    }
    for @*ARGS {
        $c.compile_module($_);
    }
}
elsif @eval {
    $c.backend.run_args = @*ARGS;
    for @eval {
        $c.compile_string($_, !$comp);
    }
}
elsif @*ARGS {
    my $file = shift @*ARGS;
    $c.backend.run_args = @*ARGS;
    $c.compile_file($file, !$comp);
}
else {
    my $*repl_outer;
    my $*repl_outer_frame;
    $c.compile_string('$PROCESS::OUTPUT_USED ::= True', !$comp, :repl,
        :evalmode);
    while True {
        print "niecza> ";
        my $l = $*IN.get // last;
        my $ok;
        try {
            $c.compile_string($l, !$comp, :repl, :evalmode,
                :outer($*repl_outer), :outer_frame($*repl_outer_frame));
            $ok = True;
        }
        say $! unless $ok;
    }
    say "";
}
