use Metamodel;
use Op;
use Body;
use Unit;
use JSYNC;
use NAMOutput;
use NieczaFrontendSTD;
use NieczaPassBegin;
use NieczaPassBeta;
use NieczaPassSimplifier;
use NieczaBackendNAM;
use NieczaPathSearch;
use NieczaCompiler;

use MONKEY_TYPING;

use CgOp;
use NieczaActions;
use Metamodel;
use CClass;
use Sig;
use OptRxSimple;
use RxOp;

augment class NieczaActions {
sub node($M) { { file => $*FILE<name>, line => $M.cursor.lineof($M.to) } }
sub mkcall($/, $name, *@positionals) {
    ::Op::CallSub.new(|node($/),
        invocant => ::Op::Lexical.new(|node($/), :$name), :@positionals);
}
my %loose2tight = (
    '&&' => '&&', '||' => '||', '//' => '//', 'andthen' => 'andthen',
    'orelse' => '//', 'and' => '&&', 'or' => '||',
);

method get_op_sym($M) {
    if $M.reduced eq '::($name)' { # XXX STD miscompilation
        return ~$M;
    } elsif $M.reduced ~~ /\:sym\<(.*)\>/ {
        return ~$0;
    } elsif $M.reduced ~~ /\:(\w+)/ {
        return ~$0;
    } elsif $M.reduced eq 'PRE' {
        return ~$M; # TODO: replace with better metaop
    } else {
        die "Cannot extract operator symbol ($M) ($M.reduced())";
    }
}

# XXX Niecza  Needs improvement
method FALLBACK($meth, $/) {
    if $meth eq '::($name)' { # XXX STD miscompilation
        if $<O><prec> eq 't=' { # additive
            make ::Op::Lexical.new(|node($/), name => '&infix:<' ~ self.get_op_sym($/) ~ '>');
        }
        return Nil;
    } elsif substr($meth,0,7) eq 'prefix:' {
    } elsif substr($meth,0,8) eq 'postfix:' {
    } elsif substr($meth,0,6) eq 'infix:' {
        make ::Op::Lexical.new(|node($/), name => '&infix:<' ~ self.get_op_sym($/) ~ '>');
        return Nil;
    } else {
        $/.CURSOR.sorry("Action method $meth not yet implemented");
    }
}
method postop($/) {
    make $<postcircumfix> ?? $<postcircumfix>.ast !!
        { postfix => self.get_op_sym($<postfix>) };
}

method PREFIX($/) {
    my $op = "\&prefix:<{ self.get_op_sym($<op>) }>";
    my $rarg = $<arg>.ast;

    # Macros
    if $op eq '&prefix:<temp>' {
        if !$rarg.^isa(::Op::ContextVar) || $rarg.uplevel {
            $/.CURSOR.sorry('Non-contextual case of temp NYI');
            make ::Op::StatementList.new;
            return Nil;
        }
        make mkcall($/, '&infix:<=>',
            ::Op::Lexical.new(name => $rarg.name, declaring => True,
                        hash => substr($rarg.name,0,1) eq '%',
                        list => substr($rarg.name,0,1) eq '@'),
            ::Op::ContextVar.new(name => $rarg.name, uplevel => 1));
        return Nil;
    }

    my ($st, $arg) = self.whatever_precheck($op, $rarg);
    make self.whatever_postcheck($/, $st, mkcall($/, $op, $arg));
}
method named_param($/) {
    my %rt;
    sub good($a, $b is rw) { $a ~~ /^<[@$%]><[.*!]>?(.*)/ && ($b = [~$0]; True) }
    if $<name> {
        if $<named_param> {
            %rt = %( $<named_param>.ast );
        } else {
            %rt = %( $<param_var>.ast );
        }
        %rt<names> = [ @( %rt<names> // [] ), ~$<name> ];
    } else {
        %rt = %( $<param_var>.ast );
        if %rt<slot> && good(%rt<slot>, %rt<names>) {
        } else {
            $/.CURSOR.sorry("Abbreviated named parameter must have a name");
        }
    }
    %rt<positional> = False;
    make %rt;
}
sub _isinfix($out is rw, $str) {
    $str ~~ /'&infix:<'(.*)'>'/ && ($out = $0; True)
}
method LIST($/) {
    if $/.CURSOR.^isa(::STD::Regex) {
        self.LISTrx($/);
        return Nil;
    }
    # STD guarantees that all elements of delims have the same sym
    # the last item may have an ast of undef due to nulltermish
    my $fn = $<delims>[0].ast;
    my $opn = $fn.^isa(::Op::Lexical) ?? $fn.name !!
        ($fn.^isa(::Op::CallSub) && $fn.invocant.^isa(::Op::Lexical)) ??
            $fn.invocant.name !! '';
    _isinfix((my $op), $opn);
    my ($st, @pos) = self.whatever_precheck($opn,
        grep *.&defined, map *.ast, @( $<list> ));

    if $op eq ',' {
        make ::Op::SimpleParcel.new(|node($/), items => @pos);
    } elsif %loose2tight{$op} {
        make ::Op::ShortCircuit.new(|node($/), kind => %loose2tight{$op},
            args => @pos);
    } else {
        make ::Op::CallSub.new(|node($/), invocant => $fn,
            positionals => @pos);
    }
    make self.whatever_postcheck($/, $st, $/.ast);
}

}

# XXX mega hack.
my class Instant {
    has $.val;
    method to-posix() { $!val }
}

my class IO {
    has $.path; # Str

    method Str() { $.path }
    method IO() { self }

    method slurp() { slurp $.path }
    method spew($text) { spew $.path, $text }

    method combine(*@paths) {
        die "Sorry, paths do not form a monoid." unless @paths;
        my $acc = @paths.shift.IO;
        for @paths { $acc = $acc.append($_) }
        $acc
    }

    method f() { Q:CgOp { (box Bool (rawscall System.IO.File.Exists (obj_getstr {$!path}))) } }
    method d() { Q:CgOp { (box Bool (rawscall System.IO.Directory.Exists (obj_getstr {$!path}))) } }
    method e() { self.f || self.d }
    method relative($base) { $base.IO.append(self) }
    method append($sub) { Q:CgOp { (box Str (rawscall System.IO.Path.Combine (obj_getstr {self}) (obj_getstr {$sub}))) }.IO }
    method but-extension($ext) { Q:CgOp { (box Str (rawscall System.IO.Path.ChangeExtension (obj_getstr {self}) (obj_getstr {$ext}))) }.IO }
    method realpath() { Q:CgOp { (box Str (rawscall System.IO.Path.GetFullPath (obj_getstr {self}))) }.IO }
    method modified() { Instant.new(val => Q:CgOp { (rawscall Builtins,Kernel.GetModTime (obj_getstr {self})) }) }
}

augment class Op::Lexical { #OK exist
    method code_bvalue($ , $ro, $rhscg) {
        CgOp.prog(
            CgOp.scopedlex($.name, CgOp.newboundvar(+$ro, +($.list || $.hash), $rhscg)),
            CgOp.scopedlex($.name));
    }
}
augment class Op::PackageVar { #OK exist
    method code_bvalue($ , $ro, $rhscg) {
        CgOp.prog(
            CgOp.scopedlex($.slot,
                CgOp.newboundvar(+$ro, +($.list || $.hash), $rhscg)),
            CgOp.scopedlex($.slot));
    }
}

augment class RxOp::CClassElem { #OK exist
    method lad() { [ 'CC', @( $.cc.terms ) ] }
}

augment class Metamodel::StaticSub { #OK exist
}

augment class Str {
    method IO() { IO.new(path => self) }
}

sub GetOptions(*@pairs, :$permute = True, :onerror($onerror_), :onarg($onarg_)) {
    my @nonopt;
    my $onerror = $onerror_ // sub ($message) {
        note $message;
        exit 1;
    };
    my $onarg = $onarg_ // sub ($arg) {
        push @nonopt, $arg;
        if !$permute {
            push @nonopt, @*ARGS;
            @*ARGS = ();
        }
    };
    my @unpk;
    sub pick_long_option($st) {
        my @cand = grep { chars($_[0]) > 1 &&
            substr($_[0],0,chars($st)) eq $st }, @unpk;
        $onerror.("Ambiguous long option --$st; could be any of {map *[0], @cand}") if @cand > 1;
        $onerror.("No match for long option --$st") if !@cand;
        @cand[0];
    }
    sub pick_short_option($st) {
        my @cand = grep { $_[0] eq $st }, @unpk;
        $onerror.("No match for short option -$st") if !@cand;
        @cand[0];
    }
    for @pairs -> $p {
        my $key = $p.key;
        my $type = '';
        if $key ~~ /<[:=]>s$/ {
            $type = ~$/;
            $key = substr($key, 0, $/.from);
        }
        for $key.split('|') {
            push @unpk, [ $_, $type, $p.value ];
        }
    }

    while @*ARGS {
        my $opt = shift @*ARGS;
        if $opt eq '--' {
            $onarg.(shift @*ARGS) while @*ARGS;
            last;
        }
        elsif substr($opt, 0, 2) eq '--' {
            if $opt ~~ /'='/ {
                my $obl = pick_long_option(substr($opt, 2, $/.from - 2));
                $onerror.("Long option --$obl[0] does not accept an argument")
                    if $obl[1] eq '';
                $obl[2].(substr($opt, $/.to));
            } else {
                my $obl = pick_long_option(substr($opt, 2));
                if $obl[1] eq '=s' {
                    $onerror.("Argument required for long option --$obl[0]")
                        unless @*ARGS;
                    $obl[2].(shift @*ARGS);
                } else {
                    $obl[2].(Str);
                }
            }
        }
        elsif chars($opt) > 1 && substr($opt, 0, 1) eq '-' {
            $opt = substr($opt, 1);
            while $opt ne '' {
                my $obl = pick_short_option(substr($opt, 0, 1));
                $opt = substr($opt, 1);
                if $obl[1] eq '' || $obl[1] eq ':s' && $opt eq '' {
                    $obl[2].(Str);
                }
                elsif $opt ne '' {
                    $obl[2].($opt);
                    $opt = '';
                }
                else {
                    $onerror.("Argument required for short option -$obl[0]")
                        unless @*ARGS;
                    $obl[2].(shift @*ARGS);
                }
            }
        }
        else {
            $onarg.($opt);
        }
    }

    @*ARGS = @nonopt;
}

my $usage = q:to/EOM/;
niecza -- a command line wrapper for Niecza

usage: niecza -e 'code'      # run a one-liner
   OR: niecza file.pl [args] # run a program
   OR: niecza -C MyModule    # precompile a module
   OR: niecza                # interactive shell

general options:
   -B --backend=NAME         # select backend (nam, mono, clisp)
   -L --language=NAME        # select your setting
   -v --verbose              # detailed timing info
   -c --compile              # don't run (implied with -C)
      --stop-after=STAGE     # stop after STAGE and dump AST
      --safe                 # disable system interaction, implies -L SAFE
      --help                 # display this message

backend options:
      --aot                  # run ahead-of-time compiler (mono)
      --obj-dir=DIR          # select output location (all)
EOM

my @lib  = "../lib", ".";
my $lang = "CORE";
my $safe = False;
my $bcnd = "nam";
my $odir = "obj";
my $verb = False;
my @eval;
my $cmod = False;
my $comp = False;
my $stop = "";
my $aotc = False;

my @*ARGS = @( @PROCESS::ARGS ); # XXX CORE bug

GetOptions(:!permute,
    "evaluate|e=s" => sub { push @eval, $_ },
    "compile-module|C" => sub { $cmod = True },
    "backend|B=s" => sub { $bcnd = $_ },
    "language|L=s" => sub { $lang = $_ },
    "verbose|v" => sub { $verb = True },
    "compile|c" => sub { $comp = True },
    "safe" => sub { $safe = True },
    "stop=s" => sub { $stop = $_ },
    "aot" => sub { $aotc = True },
    "obj-dir=s" => sub { $odir = $_ },
    "help|h" => sub { say $usage; exit 0 },
);

my $c = NieczaCompiler.new(
    module_finder => NieczaPathSearch.new(
        path => @lib,
    ),
    frontend => NieczaFrontendSTD.new(
        lang => $safe ?? 'SAFE' !! $lang,
        safemode => $safe,
    ),
    stages => [
        NieczaPassBegin.new,
        NieczaPassBeta.new,
        NieczaPassSimplifier.new,
    ],
    backend => NieczaBackendNAM.new(
        obj_dir => $odir,
    ),
    verbose => $verb,
);

if $cmod {
    if @eval {
        note "Module compilation cannot be used with strings to evaluate";
        exit 1;
    }
    if !@*ARGS {
        say "No modules named to compile!";
        exit 0;
    }
    for @*ARGS {
        $c.compile_module($_, $stop);
    }
}
elsif @eval {
    $c.backend.run_args = @*ARGS;
    for @eval {
        $c.compile_string($_, !$comp, $stop);
    }
}
elsif @*ARGS {
    my $file = shift @*ARGS;
    $c.backend.run_args = @*ARGS;
    $c.compile_file($file, !$comp, $stop);
}
else {
    while True {
        print "niecza> ";
        my $l = $*IN.get // last;
        $c.compile_string($l, !$comp, $stop);
    }
}
