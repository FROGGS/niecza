# vim: ft=perl6

# We have to do this directly due to the circularity saw.  Same
# reason forces uncontainerized .NET values.
#
# ClassHOW instances are shared between lexical instantiations of a class.
#
# class ClassHOW {
#     has Array[Frame] $.outers;
#
#     # TODO
#     has Array[Sub] $.scoped-parents;
#     has Array[Sub] $.scoped-roles;
#
#     # used to stage for composition - not yet
#     has Dictionary[str,int] $.method-scopes;
#     has Dictionary[str,Sub] $.methods;
#
#     has DynProtoMetaObject $.meta-object;
# }
#
# Due to concerns of screwing up composition, adding new superclasses, roles,
# or attributes in an augment is not allowed at this time.  Methods only.
#
# to create a class:
#     BEGIN my $Foo_HOW ::= ClassHOW.new("Foo");
#     BEGIN {
#         $Foo_HOW.push-scope(callframe);
#         $Foo_HOW.add-super(...);
#         $Foo_HOW.add-role(...);
#         $Foo_HOW.add-scoped-method("bar", 0, sub { ... });
#         $Foo_HOW.compose;
#     }
#     my ::Foo will begin { $Foo_HOW.create-protoobject(callframe) }
#              will enter { $Foo_HOW.create-protoobject(callframe) };
#
# to augment:
#     BEGIN my $scopenum = $Foo_HOW.push-scope(callframe);
#     BEGIN { $Foo_HOW.add-scoped-method("baz", $scopenum, sub { ... }); }
#     Foo.^bind-outer($scopenum, callframe);
my class ClassHOW { ... }

PRE-INIT {
    # ClassHOW.new($name) --> meta class instance
    sub new { Q:NIL {
        LEXICALS: $pmo : DynProtoMetaObject, $self : DynObject
        new/0:DynProtoMetaObject L!$pmo
        new/0:DynObject L!$self

        L@$pmo L@$self !.how
        L@$pmo =[1] @ unwrap:String !.name

        L@$self @.slots L@$pmo ![meta-object]
        L@$self =[0] @ cast:DynObject @.klass !.klass

        L@$self .plaincall/1:Kernel.NewROVar
    } }

    # $how.push-scope($outer)
    sub push-scope { Q:NIL {
        =[0] @ cast:DynObject @.slots @[meta-object] cast:DynProtoMetaObject
          @.def_outers  =[1] @ unwrap:Frame .virtcall/1:Add
        null:Variable
    } }

    # $how.add-scoped-method($name, $index, $sub)
    sub add-scoped-method { Q:NIL {
        LEXICALS: $name : String, $index : Int32, $sub : DynObject
        LEXICALS: $mo : DynProtoMetaObject
        =[0] @ cast:DynObject @.slots @[meta-object] cast:DynMetaObject L!$mo
        =[1] @ unwrap:String L!$name
        =[2] @ unwrap:Int32 L!$index
        =[3] @ cast:DynObject L!$sub

        LEXICALS: $proto : Frame, $code : DynBlockDelegate
        L@$sub @.slots @[code]  cast:DynBlockDelegate L!$code
        L@$sub @.slots @[proto] cast:Frame L!$proto

        LEXICALS: $m : DynProtoMetaObject.Method
        L@$code L@$proto L@$index new/3:DynProtoMetaObject.Method L!$m

        L@$mo @.local  L@$name  L@$m ![]
        null:Variable
    } }

    # $how.create-protoobject($callframe)
    sub create-protoobject { Q:NIL {
        LEXICALS: $p : DynObject, $pmo : DynProtoMetaObject, $mo : DynMetaObject
        new/0:DynObject L!$p
        =[0] @ cast:DynObject @.slots @[meta-object] L!$pmo
        L@$pmo new/1:DynMetaObject L!$mo
        L@$mo @.outers  =[1] @ unwrap:Frame  .virtcall/1:Add

        L@$p null:Dictionary<string,object> !.slots
        L@$p L@$mo !.klass

        L@$p .plaincall/1:Kernel.NewROVar
    } }

    sub compose { Q:NIL { null:Variable } }

    Q:NIL {
        LEXICALS: $chpmo : DynProtoMetaObject, $ch : DynObject
        new/0:DynProtoMetaObject L!$chpmo
        new/0:DynObject L!$ch

        L@$chpmo L@$ch !.how
        L@$chpmo "ClassHOW" !.name
        L@$ch @.slots L@$chpmo ![meta-object]

        L@&create-protoobject @
            L@$ch .plaincall/1:Kernel.NewROVar
            callframe new/1:CLRImportObject .plaincall/1:Kernel.NewROVar
            .call/2 L!^ClassHOW

        L@$ch  L@^ClassHOW @ cast:DynObject @.klass  !.klass
        L@$ch  L!^'ClassHOW!HOW'

        null:Variable
    }
}

sub infix:<~> { Q:NIL {
    =[0] @ unwrap:String  =[1] @ unwrap:String  .plaincall/2:String.Concat
        new/1:CLRImportObject .plaincall/1:Kernel.NewROVar
} }

sub say { Q:NIL {
    =[0] @ unwrap:String .plaincall/1:Console.WriteLine null:Variable
} }

say("Hello, " ~ "World");
