# vim: ft=perl6

# We have to do this directly due to the circularity saw.  Same
# reason forces uncontainerized .NET values.
#
# ClassHOW instances are shared between lexical instantiations of a class.
#
# class ClassHOW {
#     has Array[Frame] $.outers;
#
#     # TODO
#     has Array[Sub] $.scoped-parents;
#     has Array[Sub] $.scoped-roles;
#
#     # used to stage for composition - not yet
#     has Dictionary[str,int] $.method-scopes;
#     has Dictionary[str,Sub] $.methods;
#
#     has DynProtoMetaObject $.metaobject;
# }
#
# Due to concerns of screwing up composition, adding new superclasses, roles,
# or attributes in an augment is not allowed at this time.  Methods only.
#
# to create a class:
#     BEGIN my $Foo_HOW ::= ClassHOW.new("Foo");
#     BEGIN {
#         $Foo_HOW.push-scope(callframe);
#         $Foo_HOW.add-super(...);
#         $Foo_HOW.add-role(...);
#         $Foo_HOW.add-scoped-method("bar", 0, sub { ... });
#         $Foo_HOW.compose;
#     }
#     my ::Foo will begin { $Foo_HOW.create-protoobject(callframe) }
#              will enter { $Foo_HOW.create-protoobject(callframe) };
#
# to augment:
#     BEGIN my $scopenum = $Foo_HOW.push-scope(callframe);
#     BEGIN { $Foo_HOW.add-scoped-method("baz", $scopenum, sub { ... }); }
#     Foo.^bind-outer($scopenum, callframe);
my class ClassHOW { ... }

PRE-INIT {
    # Constructs a ClassHOW object for an existing DynProtoMetaObject
    # Takes the metaclass' DynMetaObject as a dependency injection
    sub wrap-metaclass { # $metaclass-mo, $mpo
        Q:NIL {
            LEXICALS: mci, p: DynObject, mpo: DynProtoMetaObject

            new/0:DynObject L!mci
            =[1] @ unwrap:DynProtoMetaObject L!mpo
            new/0:DynObject L!p2

            L@p L@mo !.klass

            L@mo L@mci !.how

            L@mci @.slots L@mo ![meta-object]
            L@mci @.slots L@p  ![prototype]

            L@mci  =[0] @ unwrap:DynMetaObject  !.klass

            L@p .plaincall/1:Kernel.NewROVar
        }
    }

=begin comment
    sub new-metaclass { Q:NIL {
        LEXICALS: mo: DynMetaObject
        new/0:DynMetaObject L!mo
        L@mo =[1] @ unwrap:String !.name
        L@^&wrap-metaclass @  =[0]
            L@mo new/1:CLRImportObject .plaincall/1:Kernel.NewROVar
            .tailcall/2
    } }

    sub new { Q:NIL {
        L@^&new-metaclass @
            =[0] @ cast:DynObject @.klass new/1:CLRImportObject
                .plaincall/1:Kernel.NewROVar
            =[1] .tailcall/2
    } }

    sub push-scope { Q:NIL {
        =[0] @ cast:DynObject @.slots @[meta-object] cast:DynMetaObject @.outers
          =[1] @ unwrap:Frame .virtcall/1:Add
        null:Variable
    } }

    sub add-scoped-method { Q:NIL {
        =[0] @ cast:DynObject @.slots @[meta-object] cast:DynMetaObject @.local
          =[1] @ unwrap:String
            =[3] @ cast:DynObject @.slots @[code] cast:DynBlockDelegate
              =[3] @ cast:DynObject @.slots @[proto] cast:Frame
                =[1] @ unwrap:Int32 new/3:DynMetaObject.Method
              ![]
        null:Variable
    } }

    Q:NIL {
        LEXICALS: $p: Variable
        L@&new-metaclass @  null:DynMetaObject new/1:CLRImportObject
            .plaincall/1:Kernel.NewROVar ="ClassHOW" .call/2 L!$p

        L@$p @ how cast:DynObject  L@$p @ cast:DynObject @.klass  !.klass

        L@$p L!^ClassHOW
        null:Variable
    }
=end comment
}

sub infix:<~> { Q:NIL {
    =[0] @ unwrap:String  =[1] @ unwrap:String  .plaincall/2:String.Concat
        new/1:CLRImportObject .plaincall/1:Kernel.NewROVar
} }

sub say { Q:NIL {
    =[0] @ unwrap:String .plaincall/1:Console.WriteLine null:Variable
} }

say("Hello, " ~ "World");
