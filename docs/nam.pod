=head1 Synopsis

This document describes NAM, aka CgOp, the Niecza Abstract Machine.  NAM is the
language used to connect the portable parts of Niecza to the unportable.  It is
the last Niecza IR which is shared between all cross-compiler backends.  It is
used primarily to refer to three things: a computing model suitable for running
Niecza output, a representation of abstract operations in the model, and a file
format for storing modules in the model.

=head1 General model

A program for execution by NAM consists of one or more units, one of which is
singled out as the main unit by a compiler option.  Each unit consists of some
global data, a list of dependency units, and a set of meta-objects.

The dependency lists organize the units into a directed acyclic graph.  A unit
can only see objects from another unit if a dependency is declared.  This
facilitates recompilation checking.

Meta-objects have per-unit unique identifiers, and can be identified globally
by a token known as an xref, which contains the originating unit's identity,
the per-unit identifier, and a name to facilitate debugging.  Meta-objects
come in two basic types; sub bodies and packages.  Packages are further
subdivided into packages, modules, classes, grammars, roles, and parametric
roles.

Sub bodies contain a variety of metadata, including the runtime class, flags
for various special types of sub, the signature, the set of lexical variable
definitions, and a tree of operations.  This tree is structured much like a
Lisp program and obeys similar evaluation rules.

NAM code must be statically typable but this may not always be enforced.
Different data objects have logical types, which can map many-to-one onto
lower-level types, especially in type-poor environments such as Parrot and
JavaScript.

Packageoids contain information about the construction of the object, such
as methods, attributes, superclasses, the C3 MRO, and the name.

=head1 Runtime data objects, by static type

=head2 int

A native integer, suitable for loop variables and similar purposes.

=head2 num

A native float, suitable for the Perl 6 Num class.

=head2 bool

A native bool, as returned by comparison operators.

=head2 str

A reference to a native immutable string.

=head2 strbuf

A reference to a native mutable string.

=head2 var

A Perl 6 variable, with identity, potentially mutable and tied.

=head2 obj

A reference to a Perl 6 object; not a variable and cannot be assigned to.

=head2 varhash

A hash table mapping strings to Perl 6 variables.

=head2 fvarlist

An array of Perl 6 variables fixed in length at creation.

=head2 vvarlist

An array of Perl 6 variables supporting OZ<>(1) deque operations.

=head2 stab

The nexus of HOW, WHAT, WHO, and REPR.  Details subject to flux.

=head2 treader

A reference to a native text input object.

=head2 twriter

A reference to a native text output object.

=head2 lad

A node in the LTM Automaton Descriptor metaobject tree.

=head2 cc

A reference to a compiled character class.

=head2 cursor

A reference to a low-level cursor.  Currently a subtype of obj.

=head2 frame

A reference to a call frame.  Currently a subtype of obj.

=head1 Operations

=head2 Macros

These do not appear in nam files as they are expanded in C<src/CgOp.pm6>.

=head3 cc_expr

=head3 construct_lad

=head3 getattr

=head3 let

=head3 newblankhash

=head3 newblanklist

=head3 noop

=head3 rnull(*@arguments)

Evaluates arguments in sequence and returns C<CORE::Nil>.  Useful for
embedding a sequence of void nam ops in a Perl 6 statement list.

=head3 string_var

=head3 varattr

=head2 Internal to the backend

These should not be used by the frontend.  They are used for construction of
some internal code fragments, usually in response to _hack settings.

=head3 _addmethod

=head3 _hintset

=head3 _invalidate

=head3 _makesub

=head3 _parametricrole


=head2 Annotations

=head3 ann($unused,$line_number,$operation)

Sets the C<$line_number> for the C<$operation>.  In the C# backend, line
number is only recorded at high-level call sites within the span.

=head3 ehspan($class,$tag,$name,$start,$end,$goto)

In the half-open interval from C<$start> to C<$end> (both of which should be
string label names), an exception of class C<$class> [1] will cause control
to be transferred to C<$end>.  C<$tag> and C<$name> are part of the incomplete
lexotics handling.  Exactly how return values are passed is still something of
a mystery.

[1] The following class values are currently defined:

    1   ON_NEXT             &next
    2   ON_LAST             &last
    3   ON_REDO             &redo
    4   ON_RETURN           &return
    5   ON_DIE              General exception, payload usually Str
    6   ON_SUCCEED
    7   ON_PROCEED
    8   ON_GOTO
    9   ON_NEXTDISPATCH     &nextsame, &nextwith; payload is a Capture

=head3 span($n1,$n2,$sync,$body)

Generates the code for C<$body> bracketed by the labels C<$n1> and C<$n2>.  If
an exception transfers control to C<$n2>, the exception payload will be
returned.  C<$sync> forces exception handling to be synchronous with respect
to the boundaries, allowing an C<ON_DIE> handler to function properly.


=head2 Operations on numbers

=head3 arith

=head3 bif_divide

=head3 bif_minus

=head3 bif_mul

=head3 bif_negate

=head3 bif_numand

=head3 bif_numcompl

=head3 bif_numeq

=head3 bif_numge

=head3 bif_numgt

=head3 bif_numle

=head3 bif_numlshift

=head3 bif_numlt

=head3 bif_numne

=head3 bif_numor

=head3 bif_numrshift

=head3 bif_numxor

=head3 bif_plus

=head3 bif_postinc

=head3 double

=head3 int

=head3 num_to_string


=head2 Operations on variables

=head3 assign($lhs,$rhs)

The basic polymorphic assignment operator.  Depending on the list status of
the left variable, either generates a basic store, or a LISTSTORE method call.

=head3 fetch($var)

Extracts the value stored in a variable.

=head3 newblankrwscalar()

Creates a new scalar variable of type Any containing Any.

=head3 newboundvar($ro,$list,$var)

Used for binding parameters in beta-eliminated subs, used to be the heart of
the binder but this is no longer so.

=head3 newrwlistvar($obj)

Wraps C<$obj> in a read-only variable with the list nature.

=head3 newrwscalar($obj)

Creates a new variable of type Any containing C<$obj>.

=head3 newscalar($obj)

Wraps C<$obj> in a read-only variable.

=head3 newvarrayvar

=head3 newvhashvar

=head3 newvnewarrayvar

=head3 newvnewhashvar

Were used for autovivification; currently unused.

=head3 newvsubvar($type,$sub,$obj)

Creates an autovivifiable variable which will call C<$sub> when written to or
bound rw, and otherwise functions as ordinary rw.

=head3 var_islist($var)

True if C<$var> has the list nature.


=head2 Operations on strings

=head3 bif_chars

=head3 bif_chr

=head3 bif_ord

=head3 bif_streq

=head3 bif_strge

=head3 bif_strgt

=head3 bif_strle

=head3 bif_strlt

=head3 bif_strne

=head3 bif_substr3

=head3 char

=head3 str

=head3 strbuf_append

=head3 strbuf_new

=head3 strbuf_seal

=head3 str_chr

=head3 strcmp

=head3 str_length

=head3 str_substring

=head3 str_tolower

=head3 str_tonum

=head3 str_toupper


=head2 Regex engine operations

=head3 bif_make

=head3 cursor_ast

=head3 cursor_backing

=head3 cursor_butpos

=head3 cursor_dows

=head3 cursor_fresh

=head3 cursor_from

=head3 cursor_item

=head3 cursor_O

=head3 cursor_pos

=head3 cursor_reduced

=head3 cursor_start

=head3 cursor_synthetic

=head3 cursor_unmatch

=head3 cursor_unpackcaps

=head3 fcclist_new

=head3 get_lexer

=head3 ladconstruct

=head3 mrl_count

=head3 mrl_index

=head3 newcc

=head3 popcut

=head3 pushcut

=head3 run_protoregex

=head3 rxbacktrack

=head3 rxbprim

=head3 rxcall

=head3 rxclosequant

=head3 rxcommitgroup

=head3 rxend

=head3 rxfinalend

=head3 rxframe

=head3 rxgetpos

=head3 rxgetquant

=head3 rxincquant

=head3 rxinit

=head3 rxopenquant

=head3 rxpushb

=head3 rxpushcapture

=head3 rxsetcapsfrom

=head3 rxsetclass

=head3 rxsetpos

=head3 rxsetquant

=head3 rxstripcaps


=head2 Operations on Perl 6 lists

=head3 bif_array_constructor

=head3 bif_grep

=head3 bif_map

=head3 get_first($list)

=head3 iter_to_list($iter)

=head3 promote_to_list($var)


=head2 Operations on low-level lists

A C<fvarlist> is a fixed sized object like a C# or Java C<Variable[]> array.
A C<vvarlist> is an OZ<>(1) deque like a C++ C<< std::deque<var> >>.  Most
operations on these types are fairly straightforward.  C<vvarlist> also does
duty as the most fundamental type of iterator; several operations are designed
to do essential iterator tasks.  C<vvarlist_> operations are not cognizant of
iterator structure and should not be used on iterators without careful
consideration of the effect.

=head3 fvarlist_item($index,$fvl)

Extracts a single element.  BUG: Currently evaluates its arguements in the
wrong order.

=head3 fvarlist_length($fvl)

Return the number of elements in the argument as an C<int>.

=head3 fvarlist_new(*@elements)

Construct a new fvarlist of compile-time length, like a C# array literal.

=head3 iter_copy_elems($iter)

Creates a new iterator which iterates over the same values, but all copied
into fresh read-write variables.  Mostly eager.

=head3 iter_flatten($iter)

Creates a new iterator which mostly-eagerly presents the same values with
sublists flattened.

=head3 iter_hasarg($iter)

Attempts to extract a value from an iterator without flattening sublists.
Returns C<bool>; if true, the value may be returned by C<vvarlist_shift>.

=head3 iter_hasflat($iter)

See C<iter_hasarg>.

=head3 vvarlist_append($onto,$new)

Adds all elements (non-destructively) from a source list onto the end of a
destination list in order.

=head3 vvarlist_clone($old)

Creates a new non-aliasing list with all elements aliases of the elements of
an old list.

=head3 vvarlist_count($list)

Returns the number of items in a list.

=head3 vvarlist_from_fvarlist($fv)

=head3 vvarlist_item($index,$list)

=head3 vvarlist_new_empty()

=head3 vvarlist_new_singleton($var)

Creates a new list with exactly one initial element.  Useful for bootstrapping
iterations.

=head3 vvarlist_pop($list)

Removes and returns the last element of a nonempty list.

=head3 vvarlist_push($list,$item)

Adds a new element to the end of a list.

=head3 vvarlist_shift($list)

Removes and returns the first element of a nonempty list.

=head3 vvarlist_sort($cb_obj,$list)

Sorts a list (not in place).  C<$cb_obj> must be an invocable object which
functions as a two-argument sort routine, returning C<Num>.

=head3 vvarlist_to_fvarlist($list)

=head3 vvarlist_unshift($list,$item)

Adds a new element to the beginning of a list.

=head3 vvarlist_unshiftn($list,$fvl)

Adds the contents of a fixed list to the beginning of a variable list in order.


=head2 Operations involving the operating system

=head3 bif_gettimeofday

=head3 exit

=head3 getargv

=head3 note

=head3 path_any_exists

=head3 path_change_ext

=head3 path_combine

=head3 path_dir_exists

=head3 path_file_exists

=head3 path_modified

=head3 path_realpath

=head3 print

=head3 say

=head3 slurp

=head3 spew

=head3 treader_getc

=head3 treader_getline

=head3 treader_open

=head3 treader_slurp

=head3 treader_stdin


=head2 Operations invoking the context system

=head3 bif_at_key

=head3 bif_at_pos

=head3 bif_bool

=head3 bif_defined

=head3 bif_delete_key

=head3 bif_exists_key

=head3 bif_hash

=head3 bif_item

=head3 bif_list

=head3 bif_num

=head3 bif_str

=head3 obj_asbool

=head3 obj_asdef

=head3 obj_asnum

=head3 obj_asstr

=head3 obj_at_key

=head3 obj_at_pos

=head3 obj_delete_key

=head3 obj_exists_key

=head3 obj_getbool

=head3 obj_getdef

=head3 obj_getnum

=head3 obj_getstr




=head2 Operations on hashes

=head3 bif_hash_keys

=head3 bif_hash_kv

=head3 bif_hash_pairs

=head3 bif_hash_values

=head3 varhash_clear

=head3 varhash_contains_key

=head3 varhash_delete_key

=head3 varhash_dup

=head3 varhash_getindex

=head3 varhash_new

=head3 varhash_setindex


=head2 Operations on activation frames

=head3 callframe

=head3 frame_caller

=head3 frame_file

=head3 frame_hint

=head3 frame_line


=head2 Sequence control operations

=head3 cgoto($name,$if)

Go to label named C<$name> (must be a literal string) if C<$if> is true.

=head3 control($type,$target,$lid,$name,$payload)

The most general interface to the exception generator.

=head3 cotake($cont)

Passes control to a coroutine identified by the continuation frame C<$cont>.
When said coroutine uses take, the new continuation frame is stored in the
C<$*nextframe> lexical and the value passed is returned.

=head3 die($exception)

Throws a basic non-resumable exception.  C<$exception> may be a raw string and
it will DWIM.

=head3 do_require($module)

=head3 goto($label)

=head3 label($name)

=head3 label_table

=head3 methodcall($name,$sig,*@args)

Calls method C<$name> on the first argument.  The interpretation of the rest of
the arguments is controlled by C<$sig>; for each argument, there is a token in
C<$sig> consisting of a length and a sequence of characters.  A zero-length
sequence represents an ordinary positional, a string like ":name" represents
a named parameter, and "flatcap" represents a | parameter.  Note that in the
last case, the argument should have type C<obj>.

=head3 ncgoto($to,$if)

See cgoto.

=head3 prog(*@arguments)

Evaluates arguments in sequence and returns the result of the last one.

=head3 return($value)

Low-level return from a body; does NOT use the control exception mechanism.
Probably best regarded as a backend-internal operator.

=head3 startgather($sub)

Creates a new coroutine to invoke C<$sub> without arguments, and returns the
initial continuation frame.

=head3 subcall($sig,*@args)

Identical to methodcall, except that the method name is considered forced to
C<INVOKE>.

=head3 take($thing)

Passes C<$thing> to the coroutine which caused the current coroutine to be
invoked.  When this coroutine is restarted, take returns the value unchanged.

=head3 ternary($cond,$true,$false)

The basic branching operator.

=head3 whileloop($until,$once,$cond,$body)

The basic repetition operator.  If C<$once> is passed, the loop is treated as
repeat..while.  If C<$until> is passed, the condition is inverted.


=head2 Operations supporting modules

=head3 from_json

=head3 from_jsync

=head3 to_json

=head3 to_jsync


=head2 Operations on booleans

=head3 bif_not

=head3 bool

=head3 compare


=head2 Data control operations

=head3 cast

=head3 const($value)

The const op causes its argument to be evaluated once and stored in the
constant table; it should only be used in cases where the identity will
have the same effect, and backends are not required to honor it.

=head3 context_get

=head3 corelex

=head3 letn

=head3 letvar

=head3 null($type)

Produces a null value of type C<$type>, suitable for initializing
a variable or other similar usage.

=head3 scopedlex

=head3 set_status

=head3 sink($argument)

Evaluates and ignores $argument.

=head3 status_get


=head2 Object model operations

=head3 box($proto,$value)

Creates a boxing object of a given type.  C<$proto> may be a CORE:: name.

=head3 class_ref("mo",$corename) | class_ref("mo",$unit,$xix,$name)

Returns the raw C<stab> for a class, by CORE:: name or xref node fields.

=head3 default_new(obj $proto, varhash $args)

Implements Mu.new.

=head3 getslot($name,$type,$object)

Fetches a named slot from an object.  C<$type> must be used consistantly.

=head3 how($obj)

Returns the ClassHOW or similar instance for an object.

=head3 instrole(fvarlist $parcel)

Instantiates a parameterized role (first argument) with arguments (rest).

=head3 llhow_name(stab $stb)

=head3 obj_does(obj $obj, stab $role)

=head3 obj_isa(obj $obj, stab $super)

=head3 obj_is_defined(obj $obj)

Checks REPR-level definedness, not .defined.

=head3 obj_llhow(obj $obj)

=head3 obj_newblank(stab $stab)

Fastest way to create an object.  Does B<not> set up variables for attributes.

=head3 obj_typename(obj $obj)

=head3 obj_what(obj $obj)

=head3 role_apply(stab $base, stab $role)

Implements the but operator for type objects.

=head3 setbox(obj $obj, ::T $value)

Mutates a boxed value in place.  Use carefully!

=head3 setslot($name, obj $obj, ::T $value)

Binds a slot, possibly to a native value.

=head3 stab_privatemethod(stab $stab, str $name)

Obtains a reference to the Sub implementing a private method.

=head3 stab_what(stab $stab)

=head3 unbox($typename, obj $obj)


=head2 CLR interface operations

=head3 rawcall

=head3 rawscall

=head1 File format

NAM unit files are encoded in JSON, using only numbers, strings, and sequences;
mappings and boolean values are excluded.  It is helpful to consider a number
of "node types" for describing the format of the sequences.  Most node types
reflect a sequence with a fixed number of children with fixed interpretations.
No names are used; all access is by index.

=head2 File root

    Name            Type    Description
    mainline_ref    Xref    Xref to mainline subroutine
    name            string  Unit's unique name
    log             ...     Mostly unused vestige of last stash system
    setting         string  Name of setting unit or null
    bottom_ref      Xref    Xref to sub containing {YOU_ARE_HERE}, or null
    filename        string  Filename of source code or null
    modtime         number  Seconds since 1970-01-01
    xref            Xref[]  Resolves refs from other units
    tdeps           TDep[]  Holds dependency data for recompilation
    stash_root      StNode  Trie holding classes and global variables

xref entries cannot be reordered as they are referenced by index.  Filename and
modification time are used for checking recompilation necessity; tdeps
("transitive dependency") are used to check for recursive recompilation with
minimal file reading.  Filename is also used to provide C<$?FILE>.  Each xref
entry is either null, a Subroutine, or a Packageoid.

=head2 Cross-reference

    Name            Type    Description
    unit            string  Names unit of origin
    index           number  Indexes into unit's xref array
    name            string  Descriptive name for debugging

Cross-reference (xref) nodes allow object references to cross unit boundaries
without complicating serialization.

=head2 Transitive dependency node

    Name            Type    Descripton
    unitname        string  Names unit that is depended on
    filename        string  Absolute filename of source code
    modtime         number  Modification time in POSIX seconds

=head2 Stash node

This is a sequence of tuples; each such tuple has one of the forms
C<[ name, "var", Xref, ChildNode ]> or C<[ name, "graft", path ]>.

=head2 Method node

    Name            Type    Description
    name            string  Method name without ! decorator
    kind            string  [1]
    var             string  Variable for implementing sub in param role
    body            Xref    Reference to implementing sub

[1] Allowable kinds are "normal", "private", and "sub".

=head2 Attribute node

    Name            Type    Description
    name            string  Attribute name without sigil or twigil
    public          number  Nonzero if attribute should be easy to inspect
    ivar            string  Sub name of BUILD phaser for param roles
    ibody           Xref    Reference to BUILD phaser

=head2 Subroutine

    Name            Type    Description
    typecode        string  Always "sub"
    name            string  Sub's name for backtraces
    outer_xref      Xref    OUTER:: sub, may be in a setting unit
    flags           number  [1]
    children        num[]   Supports tree traversals
    param_role_hack ...     [2]
    augment_hack    ...     [3]
    hint_hack       ...     [4]
    is_phaser       number  [5]
    body_of         Xref    Only valid in immediate block of class {} et al
    in_class        Xref    Innermost enclosing body_of
    cur_pkg         str[]   OUR:: as a list of names
    class           string  &?BLOCK.WHAT; "Sub" or "Regex"
    ltm             LtmNode Only for regexes; stores declarative prefix
    exports         str[][] List of global names
    signature       Param[] May be null in exotic cases
    lexicals        Lex[]   Come in multiple forms
    nam             ...     See description of opcodes earlier

[1] The following flags are used:

    1   RUN_ONCE        Sub does not need pad cloning
    2   SPAD_EXISTS     Sub needs a static pad
    4   GATHER_HACK     Assume a "take EMPTY" at end
    8   STRONG_USED     Not dead code even if unreferenced
    16  RETURNABLE      Add a return exception handler
    32  AUGMENTING      Is an augment{} block

[2] Xref to role object if this is a role{} block with parameters

[3] Sequence; first item is a ref to the target packageoid, subsequent items
are Method descriptors.

[4] Sequence of [Xref, string] identifying a specific "hint" lexical in a
specific sub.  This lexical is bound to the return value of the current sub's
code; will always be seen with a PREINIT phaser.

[5] If non-null, registers the current sub for a phaser queue.

    0   INIT    Before global mainline
    1   END     Not implemented
    2   PREINIT Before all mainlines

=head2 Lexical definition

These come in several flavors, but all share the same first two fields, which
are used to find the correct lexical and identify its format.

    Name            Type    Description
    name            string  "$?FOO" or similar
    typecode        string  Always 'hint'

This type is used for lexically scoped constants.  They cannot be rebound by
the scopedlex or corelex operations, but are automatically bound by the
handling of hint_hack subs.

    Name            Type    Description
    name            string  "$foo"
    typecode        string  Always 'simple'
    flags           number  4=NOINIT, 2=LIST, 1=HASH

These are used for run of the mill my-variables.  NOINIT is required for
variables that are initialized by signature binding.

    Name            Type    Description
    name            string  "$foo"
    typecode        string  Always 'alias'
    to              string  "anon_21934"

These are used for state variables, which need storage in an outer sub, but
should only be accessible under the declared name in an inner one.

    Name            Type    Description
    name            string  "Regex"
    typecode        string  Always 'stash'
    path...         string  "GLOBAL"
    path...         string  "STD"
    path...         string  "Regex"

These are used to lexically name packageoids.  All packageoids have a stash
name; my-scoped packageoids get gensym names.  The list of names is stored
inline.

    Name            Type    Description
    name            string  "$ALL"
    typecode        string  Always 'common'
    path...         string  "GLOBAL"
    path...         string  "STD"
    path...         string  "$ALL"

These are used for our-scoped variables.  As an optimization, direct references
like C<$STD::ALL> generate a gensym-named common lexical.

    Name            Type    Description
    name            string  "&say"
    typecode        string  Always 'sub'
    [Xref stored inline here]

These are used for subs, and must be in correspondence with the "zyg" list.

=head2 Signature parameter

    Name            Type    Description
    name            string  For binding error messages
    flags           number  [1]
    names           str[]   All legal named-parameter names
    slot            string  Name of lexical to accept value
    default         Xref    Sub to call if HAS_DEFAULT; must be child of this

[1] Flag values are as follows.

    1   SLURPY      *@foo or *%foo (check HASH)
    2   SLURPYCAP   |$foo
    4   RWTRANS     \$foo
    8   FULL_PARCEL \|$foo
    16  OPTIONAL    $foo?
    32  POSITIONAL  $foo, not :$foo
    64  READONLY    $foo, not $foo is rw
    128 LIST        @foo
    256 HASH        %foo

=head2 Packageoid

    Name            Type    Description
    typecode        string  A definition keyword or "parametricrole"
    name            string  The object's debug name
    exports         str[][] List of global names to which object is bound
    (The following are only found in class, grammar, role, parametricrole)
    attributes      attr[]  Attributes local to the class
    methods         methd[] Methods local to the class
    superclasses    Xref[]  Direct superclasses of the class
    (The following is only found in class, grammar)
    linear_mro      Xref[]  All superclasses in C3 order
