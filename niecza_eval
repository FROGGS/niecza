#! /usr/bin/env perl
use warnings;
use strict;
use 5.010;

use CompilerDriver ':all';
use Getopt::Long;
use autodie ':all';

my @evaluate;
my $ast;
my $module;
my $csonly;
my $lang = 'CORE';

sub usage {
    my ($fh, $ex) = @_;
    print $fh <<EOM;
niecza -- a command line wrapper for Niecza

usage: niecza -e 'code'      # run a one-liner
   OR: niecza file.pl        # run a program
   OR: niecza -c File.pm     # precompile a module
   OR: niecza                # interactive shell

general options:
   --cs-only                 # stop after .cs generation
   --ast                     # stop after AST generation
   --language=NAME           # select your setting
EOM
    exit $ex;
}

GetOptions('ast' => \$ast, 'evaluate|e=s' => \@evaluate,
        'compile|c' => \$module, 'cs-only' => \$csonly,
        'language|L=s' => \$lang)
    or usage(\*STDERR, 1);

my $excl = 0;
$excl++ if @evaluate;
$excl++ if @ARGV;
if ($excl > 1 || $module && !@ARGV) {
    usage(\*STDERR, 1);
}

sub run {
    compile(main => !$module, csonly => $csonly, ast => $ast,
        lang => $lang, @_);
    system 'mono --debug=casts MAIN.exe' if !$module && !$csonly;
}

if (@ARGV) {
    require File::Slurp;
    for (@ARGV) {
        run(file => $_);
    }
} elsif (@evaluate) {
    for (@evaluate) {
        run(code => $_);
    }
} else {
    require Term::ReadLine;
    my $term = Term::ReadLine->new('niecza');
    while (defined ($_ = $term->readline("> ")) ) {
        /^\s*[^\s#]/ or next;
        eval {
            run(code => "say do $_");
        };
        say $@ if $@;
        $term->addhistory($_) if /\S/;
    }
}
