=head1 Synopsis

This document describes NAM, aka CgOp, the Niecza Abstract Machine.
NAM is the language used to connect the portable parts of Niecza to
the unportable.  It is the last Niecza IR which is shared between all
cross-compiler backends.  It is used primarily to refer to two things:
a computing model suitable for running Niecza output and a
representation of abstract operations in the model.

=head1 General model

NAM does B<not> define a file format, nor does it handle the details
of representing classes or similar things.  Those are handled by a
separate backend protocol (not yet documented).   NAM only handles the
executable expressions and statements that make up sub bodies.

Each sub which is created by the frontend is associated with a string
of NAM code, and a list of metaobjects referenced by the NAM code.
The backend then needs to use this code to make the sub executable;
the CLR backend delays this as long as possible because of quirks of
the AssemblyBuilder/TypeBuilder interface, but this is not generally
required.

NAM code must be statically typable but this may not always be enforced.
Different data objects have logical types, which can map many-to-one onto
lower-level types, especially in type-poor environments such as Parrot and
JavaScript.

NAM is vaguely similar to Lisp, in the sense that NAM code is built
out of expressions which have a value and possibly side effects.  An
example might do well here:

    ["say",["str","Hello, world"]]

Here the "str" expression returns a C<str>, while the "say" expression
does not return anything.  NAM, like many backends, does not treat
C<void> as a runtime type, and in fact has no way to represent the
name.

=head1 Surface syntax

NAM code is send to the backend in the form of a variant of JSON.
Mappings and C<undefined> are not used; only sequences, strings,
numbers, C<null>, C<true>, and C<false> will be generated.  One
additional syntactic item is added, C<!123>, which uses a decimal
index to represent a runtime object which the code needs to reference.

Within string literals, the only escape sequence used is C<\uABCD>,
with the requirement to use surrogate characters for codepoints
outside the BMP.  Outside string literals, whitespace is generally not
used.

=head1 Runtime data objects, by static type

=head2 int

A native integer, suitable for loop variables and similar purposes.

=head2 num

A native float, suitable for the Perl 6 Num class.

=head2 bool

A native bool, as returned by comparison operators.

=head2 str

A reference to a native immutable string.

=head2 strbuf

A reference to a native mutable string.

=head2 var

A Perl 6 variable, with identity, potentially mutable and tied.

=head2 obj

A reference to a Perl 6 object; not a variable and cannot be assigned to.

=head2 varhash

A hash table mapping strings to Perl 6 variables.

=head2 fvarlist

An array of Perl 6 variables fixed in length at creation.

=head2 vvarlist

An array of Perl 6 variables supporting OZ<>(1) deque operations.

=head2 stab

The nexus of HOW, WHAT, WHO, and REPR.  Details subject to flux.

=head2 treader

A reference to a native text input object.

=head2 twriter

A reference to a native text output object.

=head2 lad

A node in the LTM Automaton Descriptor metaobject tree.

=head2 cc

A reference to a compiled character class.

=head2 cursor

A reference to a low-level cursor.  Currently a subtype of obj.

=head2 frame

A reference to a call frame.  Currently a subtype of obj.

=head1 Operations

=head2 Macros

These do not appear in nam files as they are expanded in C<src/CgOp.pm6>.

=head3 cc_expr

=head3 construct_lad

=head3 getattr

=head3 let

=head3 newblankhash

=head3 newblanklist

=head3 noop

=head3 rnull(*@arguments)

Evaluates arguments in sequence and returns C<CORE::Nil>.  Useful for
embedding a sequence of void nam ops in a Perl 6 statement list.

=head3 string_var

=head3 varattr

=head2 Internal to the backend

These should not be used by the frontend.  They are used for construction of
some internal code fragments, usually in response to _hack settings.

=head3 _addmethod

=head3 _hintset

=head3 _invalidate

=head3 _makesub

=head3 _newlabel

=head3 _parametricrole


=head2 Annotations

=head3 ann($line_number,$operation)

Sets the C<$line_number> for the C<$operation>.  In the C# backend, line
number is only recorded at high-level call sites within the span.

=head3 letscope($transparent,{$lexname,$letname}...,$body)

Within C<$body>, any lexical access to a C<$lexname> is remapped into
a C<letvar> access to the corresponding C<$letname>.  This is used for
inlined functions.  If C<$transparent> is false, the corresponding
scope should be seen by C<OUTER::> and the like (not yet implemented).

=head3 xspan($n1,$n2,$sync,$body,{$class,$name,$goto},..)

Generates the code for C<$body> bracketed by the labels C<$n1> and
C<$n2>.  If an exception transfers control to C<$n2>, the exception
payload will be returned.  Triples of C<$code>, C<$label>, and
C<$goto> define exception handling within the block.  C<$sync> forces
exception handling to be synchronous with respect to the boundaries,
allowing an C<ON_DIE> handler to function properly.

For each triple, while execution is within the block, an exception of
class C<$class> [1] will cause control to be transferred to C<$goto>.
C<$name> is used for targetted control exceptions, possibly paired
with the identity of the target frame.  A name of the empty string is
treated as no name; such handlers can only be reached anonymously.

[1] The following class values are currently defined:

    1   ON_NEXT             &next
    2   ON_LAST             &last
    3   ON_REDO             &redo
    4   ON_RETURN           &return
    5   ON_DIE              General exception, payload usually Str
    6   ON_SUCCEED          &succeed, when{} matched
    7   ON_PROCEED          &proceed
    8   ON_GOTO             &goto
    9   ON_NEXTDISPATCH     &nextsame, &nextwith; payload is a Capture


=head2 Operations on numbers

=head3 arith

=head3 divide

=head3 minus

=head3 mod

=head3 mul

=head3 negate

=head3 numand

=head3 numcompl

=head3 numeq

=head3 numge

=head3 numgt

=head3 numle

=head3 numlshift

=head3 numlt

=head3 numne

=head3 numor

=head3 numrshift

=head3 numxor

=head3 plus(var $left,var $right) is pure

Adds $left and $right together.

=head3 postinc

=head3 double

=head3 int

=head3 num_to_string


=head2 Operations on variables

=head3 assign($lhs,$rhs)

The basic polymorphic assignment operator.  Depending on the list status of
the left variable, either generates a basic store, or a LISTSTORE method call.

=head3 fetch($var)

Extracts the value stored in a variable.

=head3 newblankrwscalar()

Creates a new scalar variable of type Any containing Any.

=head3 newboundvar($ro,$list,$var)

Used for binding parameters in beta-eliminated subs, used to be the heart of
the binder but this is no longer so.

=head3 newrwlistvar($obj)

Wraps C<$obj> in a read-only variable with the list nature.

=head3 newrwscalar($obj)

Creates a new variable of type Any containing C<$obj>.

=head3 newvarrayvar

=head3 newvhashvar

=head3 newvnewarrayvar

=head3 newvnewhashvar

Were used for autovivification; currently unused.

=head3 newvsubvar($type,$sub,$obj)

Creates an autovivifiable variable which will call C<$sub> when written to or
bound rw, and otherwise functions as ordinary rw.

=head3 var_get_var($var)

Returns the object backing C<$var> (will be a fake proxy if not tied).

=head3 var_islist($var)

True if C<$var> has the list nature.

=head3 var_new_tied($type,$bind,$fetch,$store)

Creates a new variable of type C<$type> which delegates access to
C<$fetch> and C<$store>.  If C<$bind> is defined, it will be called on
the first rw binding, per the autovivification protocol.


=head2 Operations on strings

=head3 chars

=head3 chr

=head3 ord

=head3 streq

=head3 strge

=head3 strgt

=head3 strle

=head3 strlt

=head3 strne

=head3 substr3

=head3 char

=head3 str

=head3 strbuf_append

=head3 strbuf_new

=head3 strbuf_seal

=head3 str_chr

=head3 strcmp

=head3 str_length

=head3 str_substring

=head3 str_tolower

=head3 str_tonum

=head3 str_toupper


=head2 Regex engine operations

=head3 make

=head3 cursor_ast

=head3 cursor_backing

=head3 cursor_butpos

=head3 cursor_dows

=head3 cursor_fresh

=head3 cursor_from

=head3 cursor_item

=head3 cursor_O

=head3 cursor_pos

=head3 cursor_reduced

=head3 cursor_start

=head3 cursor_synthetic

=head3 cursor_unmatch

=head3 cursor_unpackcaps

=head3 fcclist_new

=head3 get_lexer

=head3 ladconstruct

=head3 mrl_count

=head3 mrl_index

=head3 newcc

=head3 popcut

=head3 pushcut

=head3 run_protoregex

=head3 rxbacktrack

=head3 rxbprim

=head3 rxcall

=head3 rxclosequant

=head3 rxcommitgroup

=head3 rxend

=head3 rxfinalend

=head3 rxframe

=head3 rxgetpos

=head3 rxgetquant

=head3 rxincquant

=head3 rxinit

=head3 rxopenquant

=head3 rxpushb

=head3 rxpushcapture

=head3 rxsetcapsfrom

=head3 rxsetclass

=head3 rxsetpos

=head3 rxsetquant

=head3 rxstripcaps


=head2 Operations on Perl 6 lists

=head3 array_constructor

=head3 cross($usefun,$fvarlist)

Implements C<X> or C<Xop>; if C<$usefun> is true, the first item in
C<$fvarlist> is taken as a function reference.

=head3 grep

=head3 map

=head3 zip($usefun,$fvarlist)

Implements C<Z> or C<Zop>; if C<$usefun> is true, the first item in
C<$fvarlist> is taken as a function reference.

=head3 get_first($list)

=head3 iter_to_list($iter)

=head3 promote_to_list($var)


=head2 Operations on low-level lists

A C<fvarlist> is a fixed sized object like a C# or Java C<Variable[]> array.
A C<vvarlist> is an OZ<>(1) deque like a C++ C<< std::deque<var> >>.  Most
operations on these types are fairly straightforward.  C<vvarlist> also does
duty as the most fundamental type of iterator; several operations are designed
to do essential iterator tasks.  C<vvarlist_> operations are not cognizant of
iterator structure and should not be used on iterators without careful
consideration of the effect.

=head3 fvarlist_item($index,$fvl)

Extracts a single element.  BUG: Currently evaluates its arguements in the
wrong order.

=head3 fvarlist_length($fvl)

Return the number of elements in the argument as an C<int>.

=head3 fvarlist_new(*@elements)

Construct a new fvarlist of compile-time length, like a C# array literal.

=head3 iter_copy_elems($iter)

Creates a new iterator which iterates over the same values, but all copied
into fresh read-write variables.  Mostly eager.

=head3 iter_flatten($iter)

Creates a new iterator which mostly-eagerly presents the same values with
sublists flattened.

=head3 iter_hasarg($iter)

Attempts to extract a value from an iterator without flattening sublists.
Returns C<bool>; if true, the value may be returned by C<vvarlist_shift>.

=head3 iter_hasflat($iter)

See C<iter_hasarg>.

=head3 vvarlist_append($onto,$new)

Adds all elements (non-destructively) from a source list onto the end of a
destination list in order.

=head3 vvarlist_clone($old)

Creates a new non-aliasing list with all elements aliases of the elements of
an old list.

=head3 vvarlist_count($list)

Returns the number of items in a list.

=head3 vvarlist_from_fvarlist($fv)

=head3 vvarlist_item($index,$list)

=head3 vvarlist_new_empty()

=head3 vvarlist_new_singleton($var)

Creates a new list with exactly one initial element.  Useful for bootstrapping
iterations.

=head3 vvarlist_pop($list)

Removes and returns the last element of a nonempty list.

=head3 vvarlist_push($list,$item)

Adds a new element to the end of a list.

=head3 vvarlist_shift($list)

Removes and returns the first element of a nonempty list.

=head3 vvarlist_sort($cb_obj,$list)

Sorts a list (not in place).  C<$cb_obj> must be an invocable object which
functions as a two-argument sort routine, returning C<Num>.

=head3 vvarlist_to_fvarlist($list)

=head3 vvarlist_unshift($list,$item)

Adds a new element to the beginning of a list.

=head3 vvarlist_unshiftn($list,$fvl)

Adds the contents of a fixed list to the beginning of a variable list in order.


=head2 Operations involving the operating system

=head3 gettimeofday

=head3 exit

=head3 getargv

=head3 note

=head3 path_any_exists

=head3 path_change_ext

=head3 path_combine

=head3 path_dir_exists

=head3 path_file_exists

=head3 path_modified

=head3 path_realpath

=head3 print

=head3 say

=head3 slurp

=head3 spew

=head3 treader_getc

=head3 treader_getline

=head3 treader_open

=head3 treader_slurp

=head3 treader_stdin


=head2 Operations invoking the context system

=head3 at_key

=head3 at_pos

=head3 asbool

=head3 defined

=head3 delete_key

=head3 exists_key

=head3 hash

=head3 item

=head3 list

=head3 num

=head3 asstr

=head3 obj_asbool

=head3 obj_asdef

=head3 obj_asnum

=head3 obj_asstr

=head3 obj_at_key

=head3 obj_at_pos

=head3 obj_delete_key

=head3 obj_exists_key

=head3 obj_getbool

=head3 obj_getdef

=head3 obj_getnum

=head3 obj_getstr




=head2 Operations on hashes

=head3 hash_keys

=head3 hash_kv

=head3 hash_pairs

=head3 hash_values

=head3 varhash_clear

=head3 varhash_contains_key

=head3 varhash_delete_key

=head3 varhash_dup

=head3 varhash_getindex

=head3 varhash_new

=head3 varhash_setindex


=head2 Operations on activation frames

=head3 callframe

=head3 frame_caller

=head3 frame_file

=head3 frame_hint

=head3 frame_line


=head2 Sequence control operations

=head3 callnext($capture)

=head3 cgoto($name,$if)

Go to label named C<$name> (must be a literal string) if C<$if> is true.

=head3 control($type,$target,$unused,$name,$payload)

The most general interface to the exception generator.

=head3 cotake($cont)

Passes control to a coroutine identified by the continuation frame C<$cont>.
When said coroutine uses take, the new continuation frame is stored in the
C<$*nextframe> lexical and the value passed is returned.

=head3 die($exception)

Throws a basic non-resumable exception.  C<$exception> may be a raw string and
it will DWIM.

=head3 do_require($module)

=head3 goto($label)

=head3 label($name)

=head3 label_table

=head3 methodcall($name,$sig,*@args)

Calls method C<$name> on the first argument.  The interpretation of the rest of
the arguments is controlled by C<$sig>; for each argument, there is a token in
C<$sig> consisting of a length and a sequence of characters.  A zero-length
sequence represents an ordinary positional, a string like ":name" represents
a named parameter, and "flatcap" represents a | parameter.  Note that in the
last case, the argument should have type C<obj>.

=head3 ncgoto($to,$if)

See cgoto.

=head3 prog(*@arguments)

Evaluates arguments in sequence and returns the result of the last one.

=head3 return($value)

Low-level return from a body; does NOT use the control exception mechanism.
Probably best regarded as a backend-internal operator.

=head3 startgather($sub)

Creates a new coroutine to invoke C<$sub> without arguments, and returns the
initial continuation frame.

=head3 subcall($sig,*@args)

Identical to methodcall, except that the method name is considered forced to
C<INVOKE>.

=head3 take($thing)

Passes C<$thing> to the coroutine which caused the current coroutine to be
invoked.  When this coroutine is restarted, take returns the value unchanged.

=head3 ternary($cond,$true,$false)

The basic branching operator.

=head3 whileloop($until,$once,$cond,$body)

The basic repetition operator.  If C<$once> is passed, the loop is treated as
repeat..while.  If C<$until> is passed, the condition is inverted.


=head2 Operations supporting modules

=head3 from_json

=head3 from_jsync

=head3 to_json

=head3 to_jsync


=head2 Operations on booleans

=head3 not

=head3 bool

=head3 compare


=head2 Data control operations

=head3 cast

=head3 const($value)

The const op causes its argument to be evaluated once and stored in the
constant table; it should only be used in cases where the identity will
have the same effect, and backends are not required to honor it.

=head3 context_get

=head3 corelex

=head3 letn

=head3 letvar

=head3 null($type)

Produces a null value of type C<$type>, suitable for initializing
a variable or other similar usage.

=head3 scopedlex

=head3 set_status

=head3 sink($argument)

Evaluates and ignores $argument.

=head3 status_get


=head2 Object model operations

=head3 box($proto,$value)

Creates a boxing object of a given type.  C<$proto> may be a CORE:: name.

=head3 class_ref("mo",$corename) | class_ref("mo",$unit,$xix,$name)

Returns the raw C<stab> for a class, by CORE:: name or xref node fields.

=head3 default_new(obj $proto, varhash $args)

Implements Mu.new.

=head3 getslot($scope,$name,$type,$object)

Fetches a named slot from an object.  C<$type> must be used consistantly.

=head3 how($obj)

Returns the ClassHOW or similar instance for an object.

=head3 instrole(fvarlist $parcel)

Instantiates a parameterized role (first argument) with arguments (rest).

=head3 llhow_name(stab $stb)

=head3 obj_does(obj $obj, stab $role)

=head3 obj_isa(obj $obj, stab $super)

=head3 obj_is_defined(obj $obj)

Checks REPR-level definedness, not .defined.

=head3 obj_llhow(obj $obj)

=head3 obj_newblank(stab $stab)

Fastest way to create an object.  Does B<not> set up variables for attributes.

=head3 obj_typename(obj $obj)

=head3 obj_what(obj $obj)

=head3 role_apply(stab $base, stab $role)

Implements the but operator for type objects.

=head3 setbox(obj $obj, ::T $value)

Mutates a boxed value in place.  Use carefully!

=head3 setslot($scope, $name, obj $obj, ::T $value)

Binds a slot, possibly to a native value.

=head3 stab_privatemethod(stab $stab, str $name)

Obtains a reference to the Sub implementing a private method.

=head3 stab_what(stab $stab)

=head3 unbox($typename, obj $obj)


=head2 CLR interface operations

=head3 rawcall

=head3 rawscall

=for vim vim: tw=70
