use MONKEY_TYPING;
use CClass;
use CgOp;
use GetOptLong;
use NieczaActions;
use NieczaBackendDotnet;
use NieczaCompiler;
use NieczaFrontendSTD;
use NieczaPassSimplifier;
use NieczaPathSearch;
use Op;
use Operator;
use OpHelpers;
use OptBeta;
use OptRxSimple;
use RxOp;
use Sig;
use STD;

augment class Sig {
    our constant $ANY_DEF    =  0x40000; #OK
    our constant $UNDEF_ONLY =  0x80000; #OK
    our constant $DEF_ONLY   =  0xC0000; #OK
    our constant $TYPE_ONLY  = 0x100000; #OK
    our constant $DEF_MASK   = 0x1C0000; #OK
}

# augment class RxOp {
# method oplift() {
#     say "oplift: {self.typename}";
#     my $i = 0;
#     map { say $i++; .oplift }, @$!zyg
# }
# }

augment class Op {
method onlystub() { False }
}

augment class Op::StatementList {
method onlystub() { $!children && $!children[0].onlystub }
}

augment class Op::Yada {
method onlystub() { True }
}

augment class STD {
my package DEBUG { our constant symtab = 0; }
method is_name($longname, $curlex = $*CURLEX) {
    my $deb = $*DEBUG +& DEBUG::symtab;
    self.deb("is_name $longname") if $deb;
    if defined($longname.index("::(")) {
        self.deb("computed name gets a free pass") if $deb;
        return True;
    }
    my $ch := chars($longname);
    $longname := substr($longname, 0, $ch-2)
        if $ch > 2 && substr($longname, $ch-2) eq (':D' | ':U' | ':_' | ':T') &&
           substr($longname, $ch-3, 1) ne ':';
    my @parts = $longname.split('::');
    shift @parts if @parts[0] eq '';
    pop @parts if @parts && @parts[*-1] eq ''; # doesn't change ref validity

    @parts[*-1] = $/ ~ @parts[*-1] if @parts && @parts[0] ~~ s/^(\W\W?)//;

    self.deb("reparsed: @parts.perl()") if $deb;
    return True if !@parts;

    my ($pkg, $sub);

    given @parts[0] {
        when 'OUR' {
            $pkg = $curlex<!sub>.cur_pkg;
            shift @parts;
            goto "packagey";
        }
        when 'PROCESS' | 'GLOBAL' {
            $pkg = $*unit.abs_pkg(shift @parts);
            goto "packagey";
        }
        when 'MY'      { $sub = $curlex<!sub>;               goto "lexy"; }
        when 'OUTER'   { $sub = $curlex<!sub>.outer;         goto "lexy"; }
        when 'UNIT'    { $sub = $curlex<!sub>.to_unit;       goto "lexy"; }
        when 'CORE'    { $sub = $curlex<!sub>.true_setting;  goto "lexy"; }
        when 'SETTING' { $sub = $curlex<!sub>.to_unit.outer; goto "lexy"; }

        when 'COMPILING' | 'DYNAMIC' | 'CALLER' | 'CLR' { return True }

        default {
            my @lexical = self.lookup_lex(@parts[0], $curlex);
            if !@lexical || @parts[0] eq 'PARENT' {
                return False if @parts == 1; # $x doesn't mean GLOBAL
                $pkg = (@parts[0] ~~ /^\W/) ??
                    $curlex<!sub>.cur_pkg !!
                    $*unit.abs_pkg('GLOBAL');
            } elsif @lexical[0] eq 'package' {
                $pkg = @lexical[4];
                shift @parts;
            } else {
                return @parts == 1;
            }
            goto "packagey";
        }
    }

lexy:
    shift @parts;
    return False unless $sub;
    return True unless @parts;
    given @parts[0] {
        when 'OUTER'   { $sub = $sub.outer;         goto "lexy"; }
        when 'UNIT'    { $sub = $sub.to_unit;       goto "lexy"; }
        when 'SETTING' { $sub = $sub.to_unit.outer; goto "lexy"; }
        when 'CALLER'  { return True; }
    }

    my @lex = $sub.lookup_lex(@parts[0], $*FILE<name>, self.lineof(self.pos));
    unless @lex {
        self.deb("Lexical @parts[0] not found") if $deb;
        return False;
    }
    if @lex[0] eq 'package' {
        shift @parts;
        $pkg = @lex[4];
        goto "packagey";
    }
    else {
        return @parts == 1;
    }

packagey:
    for @parts {
        return False if !$pkg || !$*unit.exists($pkg.who, $_);
        $pkg = $*unit.get($pkg.who, $_);
    }

    return True;
}
}

augment class RxOp::Capturing {
    method used_caps() {
        my %h = map { ($_ => $*in_quant ?? 2 !! 1) }, @$.captures;

        for @$.zyg -> $k {
            for $k.used_caps.pairs -> $p {
                %h{$p.key} = (%h{$p.key} // 0) + $p.value;
            }
        }

        %h
    }
}

augment class Op::ImmedForLoop {
    method code_labelled($body, $l) {
        my $id = ::GLOBAL::NieczaActions.genid;

        CgOp.rnull(CgOp.letn(
            "!iter$id", CgOp.start_iter($.source.cgop($body)),
            (map { $_, CgOp.null('var') }, @$.var),
            CgOp.label("again$id"),
            (map {
                CgOp.ncgoto("last$id",
                    CgOp.iter_hasflat(CgOp.letvar("!iter$id"))),
                CgOp.letvar($_, CgOp.vvarlist_shift(CgOp.letvar("!iter$id")))
            }, @$.var),
            CgOp.sink(CgOp.xspan("redo$id", "next$id", 0,
                $.sink.cgop($body),
                1, $l, "next$id",
                2, $l, "last$id",
                3, $l, "redo$id")),
            CgOp.goto("again$id"),
            CgOp.label("last$id")));
    }
}

augment class NieczaActions {
method nibbler($/, $prefix?) {
    sub iscclass($cur) {
        # XXX XXX
        ?$cur.^can('ccstate');
    }
    if $/.CURSOR.^isa(::STD::Regex) {
        make $<EXPR>.ast;
    } elsif $/.CURSOR.^isa(::NieczaGrammar::CgOp) {
        if $*SAFEMODE {
            $/.CURSOR.sorry('Q:CgOp not allowed in safe mode');
            make ::Op::StatementList.new;
            return Nil;
        }
        make ::Op::CgOp.new(|node($/), optree => $<cgexp>.ast);
    } elsif iscclass($/.CURSOR) {
        make self.process_tribble($<nibbles>);
    } else {
        make self.process_nibble($/, $<nibbles>, $prefix);
    }
}
method trait_mod:does ($/) {
    make { does => self.process_name($<typename><longname>) };
}

method process_block_traits($/, @tr) {
    my $sub = $*CURLEX<!sub>;
    my $pack = $sub.body_of;
    for @tr -> $T {
        my $tr = $T.ast;
        if $pack && $tr<name> {
            my $super = $tr<name>;

            $T.CURSOR.sorry("superclass $super.name() declared outside of any class"),
                next unless $sub.body_of;
            $T.CURSOR.sorry("superclass $super.name() declared in an augment"),
                next if defined $*AUGMENT_BUFFER;
            $T.CURSOR.sorry("cannot declare a superclass in this kind of package"),
                next if !$pack.CAN('add_super');

            $T.CURSOR.trymop({
                $pack.add_super($super);
            });
        } elsif $pack && $tr<does> {
            my $role = $tr<does>;

            $T.CURSOR.sorry("role $role.name() used outside of any class"), next
                unless $sub.body_of;
            $T.CURSOR.sorry("role $role.name() used in an augment"),
                next if defined $*AUGMENT_BUFFER;
            $T.CURSOR.sorry("cannot use a role in this kind of package"),
                next if !$pack.CAN('add_role');

            $T.CURSOR.trymop({
                $pack.add_role($role);
            });
        } elsif $pack && $tr<export> {
            my @exports = @( $tr<export> );
            $sub.outer.add_exports($pack.name, $pack, @exports);
        } elsif !$pack && $tr<export> {
            my @exports = @( $tr<export> );
            $sub.outer.add_exports('&'~$sub.name, $sub, @exports);
            $sub.outer.create_static_pad;
            $/.CURSOR.mark_used($sub.outervar)
                if defined $sub.outervar;
        } elsif !$pack && $tr<nobinder> {
            $sub.set_signature(Any);
        } elsif !$pack && grep { defined $tr{$_} }, <looser tighter equiv> {
            my $rel = $tr.keys.[0];
            my $to  = $tr.values.[0];
            $to = $to.inside if $to ~~ ::Op::Paren;
            $to = $to.children[0] if $to ~~ ::Op::StatementList && $to.children == 1;

            my $oprec;
            if $to ~~ ::Op::Lexical {
                $oprec = $T.CURSOR.function_O($to.name);
            } elsif $to ~~ ::Op::StringLiteral && $sub.name ~~ /^(\w+)\:\<.*\>$/ {
                $oprec = $T.CURSOR.cat_O(~$0, $to.text);
            } else {
                $T.CURSOR.sorry("Cannot interpret operator reference");
                next;
            }
            unless $sub.get_extend('prec') {
                $T.CURSOR.sorry("Target does not seem to be an operator");
                next;
            }
            unless $oprec {
                $T.CURSOR.sorry("No precedence available for reference target");
                next;
            }
            if $rel eq 'equiv' {
                $sub.set_extend('prec', $oprec.kv);
            } else {
                my %prec = $sub.get_extend('prec');
                %prec<prec> = $oprec.<prec>;
                %prec<prec> ~~ s/\=/<=/ if $rel eq 'looser';
                %prec<prec> ~~ s/\=/>=/ if $rel eq 'tighter';
                $sub.set_extend('prec', %prec.kv);
            }
        } elsif !$pack && $tr<assoc> {
            my $arg = ~self.trivial_eval($T, $tr<assoc>);
            my %prec = $sub.get_extend('prec');
            unless %prec {
                $T.CURSOR.sorry("Target does not seem to be an operator");
                next;
            }
            unless $arg eq any < left right non list unary chain > {
                $T.CURSOR.sorry("Invalid associativity $arg");
                next;
            }
            %prec<assoc> = $arg;
            $sub.set_extend('prec', %prec.kv);
        } elsif !$pack && $tr<Niecza::absprec> {
            my $arg = ~self.trivial_eval($T, $tr<Niecza::absprec>);
            my %prec = $sub.get_extend('prec');
            unless %prec {
                $T.CURSOR.sorry("Target does not seem to be an operator");
                next;
            }
            %prec<prec> = $arg;
            %prec<dba> = "like $sub.name()";
            $sub.set_extend('prec', %prec.kv);
        } elsif !$pack && $tr<Niecza::builtin> {
            $sub.set_extend('builtin',
                self.trivial_eval($T, $tr<Niecza::builtin>));
        } elsif !$pack && $tr<return_pass> {
            $sub.set_return_pass;
        } elsif !$pack && $tr<of> {
        } elsif !$pack && $tr<rw> {
        } elsif !$pack && $tr<unsafe> {
            $sub.set_unsafe;
        } else {
            $T.CURSOR.sorry("Unhandled trait $tr.keys[0] for this context");
        }
    }
}


method open_package_def($, $/ = $*cursor) {
    my $sub = $*CURLEX<!sub>;

    if $*MULTINESS {
        $/.CURSOR.sorry("Multi variables NYI");
    }

    if $*SCOPE eq 'augment' {
        my ($obj) = self.process_name($<longname>, :clean);
        $*AUGMENT_BUFFER = [];

        $/.CURSOR.trymop({
            die "Augment requires a target" unless $obj;
            die "Illegal augment of a role" if $obj.kind eq 'role' | 'prole';

            $sub.set_body_of($obj);
            $sub.set_in_class($obj);
            $sub.set_cur_pkg($obj);
            $sub.set_name("augment-$obj.name()");
        });
    } else {
        my $class = $*PKGDECL;
        if $class eq 'role' {
            my $sig = $<signature> ?? $<signature>.ast !! Sig.simple();
            unshift $sig.params, ::Sig::Parameter.simple('$?CLASS');
            $sub.add_my_name('$?CLASS', :noinit);
            $sub.set_signature($sig);
            $class = 'prole';
        }

        $/.CURSOR.trymop({
            my ($lexvar, $obj) = self.do_new_package($/, sub => $sub.outer,
                :$class, name => $<longname>, scope => $*SCOPE);

            $sub.set_outervar($lexvar);
            $sub.set_body_of($obj);
            $sub.set_in_class($obj);
            $sub.set_cur_pkg($obj);

            self.process_block_traits($/, $<trait>);
            $sub.set_name($*PKGDECL ~ "-" ~ $obj.name);
        });
    }
}
sub qpvalue($ast) {
    if $ast.^isa(::Op::SimpleParcel) {
        join " ", map &qpvalue, @( $ast.items )
    } elsif $ast.^isa(::Op::StringLiteral) {
        $ast.text;
    } elsif $ast.^isa(::Op::Paren) {
        qpvalue($ast.inside);
    } else {
        "XXX"
    }
}

method colonpair($/) {
    my $n;
    if $/ eq any <:_ :U :D :T> {
        $n = "";
    } elsif !$<v>.^isa(Match) {
        $n = ":" ~ ($<v> ?? '' !! '!') ~ $<k>;
    } else {
        $n = ":" ~ $<k> ~ "<" ~ qpvalue($<v>.ast // ~$<v>) ~ ">";
    }
    my $tv = $<v>.^isa(Match) ?? ($<v>.ast // ~$<v>) !!
        ::Op::Lexical.new(name => $<v> ?? 'True' !! 'False');

    if $tv ~~ Str {
        if substr($<v>,1,1) eq '<' {
            $tv = mkcall($/, '&postcircumfix:<{ }>',
                ::Op::Lexical.new(name => '$/'),
                ::Op::StringLiteral.new(text => ~$<k>));
        } else {
            $tv = self.do_variable_reference($/,
                { sigil => ~$<v><sigil>,
                    twigil => ($<v><twigil> ?? ~$<v><twigil> !! ''),
                    name => $<k> });
        }
    }

    make { ext => $n, term => ::Op::SimplePair.new(key => $<k>, value => $tv) };
}
method parameter($/) {
    constant %masks = ':_' => $Sig::ANY_DEF, ':T' => $Sig::UNDEF_ONLY,
        ':U' => $Sig::UNDEF_ONLY, ':D' => $Sig::DEF_ONLY;

    my $type;
    my $sorry;
    my $p = $<param_var> // $<named_param>;
    my $p_ast = $p ?? $p.ast !! { names => [], flags => $Sig::POSITIONAL };
    my $flags = $p_ast<flags>;

    $flags +|= $Sig::READWRITE if $*SIGNUM && $*CURLEX<!rw_lambda>;

    if $<type_constraint> {
        my $long = $<type_constraint>[0]<typename><longname>;
        ($type) = self.process_name($long);

        for @( $long<colonpair> ) -> $cp {
            if %masks{$cp} -> $mask {
                $/.CURSOR.sorry("You may only specify one of :_ :D :U :T")
                    if $flags +& $Sig::DEF_MASK;
                $flags +|= $mask;
            }
        }
    }

    for @( $<trait> ) -> $trait {
        if $trait.ast<rw> { $flags +|= $Sig::READWRITE }
        elsif $trait.ast<copy> { $flags +|= $Sig::IS_COPY }
        elsif $trait.ast<parcel> { $flags +|= $Sig::RWTRANS }
        elsif $trait.ast<readonly> { $flags +&= +^$Sig::READWRITE }
        else {
            $trait.CURSOR.sorry('Unhandled trait ' ~ $trait.ast.keys.[0]);
        }
    }

    if $<post_constraint> > 0 {
        $/.sorry('Parameter post constraints NYI');
        make ::Sig::Parameter.new;
        return Nil;
    }

    my $default = $<default_value> ?? $<default_value>.ast !! Any;
    $default.set_name("$/ init") if $default;

    my $tag = $<quant> ~ ':' ~ $<kind>;
    if    $tag eq '**:*' { $sorry = "Slice parameters NYI" }
    elsif $tag eq '*:*'  { $flags +|= ($flags +& $Sig::IS_HASH) ?? $Sig::SLURPY_NAM !! $Sig::SLURPY_POS }
    elsif $tag eq '|:*'  { $flags +|= $Sig::SLURPY_CAP }
    elsif $tag eq '\\:!' { $flags +|= $Sig::RWTRANS }
    elsif $tag eq '\\:?' { $flags +|= ($Sig::RWTRANS + $Sig::OPTIONAL) }
    elsif $tag eq ':!'   { }
    elsif $tag eq ':*'   { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq ':?'   { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq '?:?'  { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq '!:!'  { }
    elsif $tag eq '!:?'  { $flags +|= $Sig::OPTIONAL }
    elsif $tag eq '!:*'  { }
    else                 { $sorry = "Confusing parameters ($tag)" }
    if $sorry { $/.CURSOR.sorry($sorry); }

    if defined $p_ast<slot> {
        # TODO: type constraint here
    }

    make ::Sig::Parameter.new(name => ~$/, mdefault => $default,
        tclass => $type, |$p_ast, :$flags);
}
method post_backslash($/) {
    # XXX confine $/ resetting
    sub _isupper { $_ ~~ /^<[ A .. Z ]>/ }
    sub _islower { $_ ~~ /^<[ a .. z ]>/ }
    if $/.ast.^isa(CClass) {
        make self.cclass_cc($/.ast);
    }
    if _isupper($/) && _islower($<sym>) {
        if $/.ast.^isa(Str) {
            make self.string_cc($/.ast);
        }
        make self.negate_cc($/.ast);
    }
}
}

# remove run_dispatch
CgOp._register_ops: < who sc_root sc_indir temporize _addmethod _invalidate
    rxlprim
>;

my $usage = q:to/EOM/;
niecza -- a command line wrapper for Niecza

usage: niecza -e 'code'      # run a one-liner
   OR: niecza file.pl [args] # run a program
   OR: niecza -C MyModule    # precompile a module
   OR: niecza                # interactive shell

general options:
   -n                        # short for -L CORN
   -p                        # short for -L CORP
   -B --backend=NAME         # select backend (dotnet)
   -L --language=NAME        # select your setting
   -I --include=DIR          # add a directory to search for modules
   -v --verbose              # detailed timing info
   -c --compile              # don't run (implied with -C)
      --safe                 # disable system interaction
      --help                 # display this message

backend options:
      --obj-dir=DIR          # select output location (all)
EOM

my $runobj = Q:CgOp { (box Str (rawcall get_BaseDirectory (rawscall System.AppDomain.get_CurrentDomain))) };
my $basedir = $runobj.IO.append("..").realpath;

my @lib  = $basedir.append("lib"), ".".IO.realpath;
my $lang = "CORE";
my $safe = False;
my $bcnd = "dotnet";
my $odir = $basedir.append("obj");
my $verb = 0;
my @eval;
my $cmod = False;
my $comp = False;
my $version = False;

GetOptions(:!permute,
    "evaluate|e=s" => sub { push @eval, $_ },
    "compile-module|C" => sub { $cmod = True },
    "backend|B=s" => sub { $bcnd = $_ },
    "language|L=s" => sub { $lang = $_ },
    "p" => sub { $lang = "CORP" },
    "n" => sub { $lang = "CORN" },
    "verbose" => sub { $verb++ },
    "version|v" => sub { $version = True },
    "compile|c" => sub { $comp = True },
    "safe" => sub { $safe = True },
    "include|I=s" => sub { unshift @lib, $_.IO.realpath },
    "obj-dir=s" => sub { $odir = $_ },
    "help|h" => sub { say $usage; exit 0 },
);

my @*INC;
my $backend;
if $bcnd eq 'dotnet' || $bcnd eq 'mono' {
    $backend = NieczaBackendDotnet.new(obj_dir => $odir, safemode => $safe);
}
else {
    note "Backend '$bcnd' not supported";
    exit 1;
}

my $c = NieczaCompiler.new(
    module_finder => NieczaPathSearch.new(
        path => @lib,
    ),
    frontend => NieczaFrontendSTD.new(
        lang => $lang,
        safemode => $safe,
    ),
    backend => $backend,
    verbose => $verb,
);

if $version {
    $c.compile_string('say "This is Niecza Perl 6 {$?PERL<version>}"', True);
    exit 0;
}

if $cmod {
    if @eval {
        note "Module compilation cannot be used with strings to evaluate";
        exit 1;
    }
    if !@*ARGS {
        say "No modules named to compile!";
        exit 0;
    }
    for @*ARGS {
        $c.compile_module($_);
    }
}
elsif @eval {
    $c.backend.run_args = @*ARGS;
    for @eval {
        $c.compile_string($_, !$comp);
    }
}
elsif @*ARGS {
    my $file = shift @*ARGS;
    $c.backend.run_args = @*ARGS;
    $c.compile_file($file, !$comp);
}
else {
    my $*repl_outer;
    my $*repl_outer_frame;
    $c.compile_string('$PROCESS::OUTPUT_USED ::= True', !$comp, :repl,
        :evalmode);
    while True {
        print "niecza> ";
        my $l = $*IN.get // last;
        my $ok;
        try {
            $c.compile_string($l, !$comp, :repl, :evalmode,
                :outer($*repl_outer), :outer_frame($*repl_outer_frame));
            $ok = True;
        }
        say $! unless $ok;
    }
    say "";
}
