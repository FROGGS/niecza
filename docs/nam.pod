=head1 Synopsis

This document describes NAM, aka CgOp, the Niecza Abstract Machine.  NAM is the
language used to connect the portable parts of Niecza to the unportable.  It is
the last Niecza IR which is shared between all cross-compiler backends.  It is
used primarily to refer to three things: a computing model suitable for running
Niecza output, a representation of abstract operations in the model, and a file
format for storing modules in the model.

=head1 General model

A program for execution by NAM consists of one or more units, one of which is
singled out as the main unit by a compiler option.  Each unit consists of some
global data, a list of dependency units, and a set of meta-objects.

The dependency lists organize the units into a directed acyclic graph.  A unit
can only see objects from another unit if a dependency is declared.  This
facilitates recompilation checking.

Meta-objects have per-unit unique identifiers, and can be identified globally
by a token known as an xref, which contains the originating unit's identity,
the per-unit identifier, and a name to facilitate debugging.  Meta-objects
come in two basic types; sub bodies and packages.  Packages are further
subdivided into packages, modules, classes, grammars, roles, and parametric
roles.

Sub bodies contain a variety of metadata, including the runtime class, flags
for various special types of sub, the signature, the set of lexical variable
definitions, and a tree of operations.  This tree is structured much like a
Lisp program and obeys similar evaluation rules.

NAM code must be statically typable but this may not always be enforced.
Different data objects have logical types, which can map many-to-one onto
lower-level types, especially in type-poor environments such as Parrot and
JavaScript.

Packageoids contain information about the construction of the object, such
as methods, attributes, superclasses, the C3 MRO, and the name.

=head1 Runtime data objects, by static type

=head2 int

A native integer, suitable for loop variables and similar purposes.

=head2 num

A native float, suitable for the Perl 6 Num class.

=head2 bool

A native bool, as returned by comparison operators.

=head2 str

A reference to a native immutable string.

=head2 strbuf

A reference to a native mutable string.

=head2 var

A Perl 6 variable, with identity, potentially mutable and tied.

=head2 obj

A reference to a Perl 6 object; not a variable and cannot be assigned to.

=head2 varhash

A hash table mapping strings to Perl 6 variables.

=head2 fvarlist

An array of Perl 6 variables fixed in length at creation.

=head2 vvarlist

An array of Perl 6 variables supporting OZ<>(1) deque operations.

=head2 stab

The nexus of HOW, WHAT, WHO, and REPR.  Details subject to flux.

=head2 treader

A reference to a native text input object.

=head2 twriter

A reference to a native text output object.

=head2 lad

A node in the LTM Automaton Descriptor metaobject tree.

=head2 cc

A reference to a compiled character class.

=head2 cursor

A reference to a low-level cursor.  Currently a subtype of obj.

=head2 frame

A reference to a call frame.  Currently a subtype of obj.

=head1 Operations

=head2 Annotations

=head3 ann($file,$line_number,$operation)

Sets the $file and $line_numer for the $operation.

=head2 Aritmetic and logical operations

=head2 Sequence control

=head3 prog(@*arguments)

Evaluates arguments in sequens and returns the result of the last one.

=head3 span

=head3 ehspan

=head3 sink($argument)

Evaluates and ignores $argument.

=head3 labelhere

=head3 cgoto

=head3 goto

=head3 ncgoto

=head3 ternary

=head3 whileloop

=head3 take

=head3 cotake

=head2 Data control

=head3 letn

=head3 fetch

=head3 assign

=head3 newscalar

=head3 newrwscalar

=head3 newblankrwscalar

=head3 newrwlistvar

=head3 null($type)

Produces a null pointer of type $type.

=head3 sink

Evaluate and throw away the argument

=head3 cast

=head2 Object model

=head3 getslot

=head3 setslot

=head3 how

=head3 obj_is_defined

=head3 obj_llhow

=head3 obj_isa

=head3 obj_does

=head3 subcall

=head3 methodcall($methodname,$dunno,@*args)

Calls method $methodname (which is a nam op).
Named parameters are passed by having a string ":option-name" and then the nam op which evaluates to the option value.


=head2 I/O

=head3 say

=head3 slurp

=head3 treader_stdin

=head2 Native operations (CLR)

These are for user code only.  Core library code should define custom system
primitives instead.

=head3 getfield

=head3 setfield

=head3 rawsget

=head3 rawsset

=head3 rawscall

=head3 rawcall

=head3 setindex

=head3 getindex

=head3 rawnew

=head3 rawnewarr

=head3 rawnewzarr

=head3 labelid
