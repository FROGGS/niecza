#! /usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromArray);
use utf8;
use v5.10;
use File::Basename;
use File::Slurp qw(slurp);
use Encode;

use lib 'src';
use Niecza::Simple;


# print the help message
sub help {
print <<'HELP';
Usage: mildew [switches] [--] [programfile] [arguments]
  -B<backend>     execute using the <backend> backend
  -C<backend>     compile using the <backend> backend
                  (valid backends are: clisp,mono)
  -F<frontend>      use the <frontend> frontend
                  (valid frontends are: STD)
  -e
  -o <file>       Place the output into <file>
HELP
exit;
}

# get command line options
my ($C,$B,$F,$help,$e,$output);
my @args;
my %args;
my $subsystem;
my $level;
for (@ARGV) {
    if (/\+\+ (\+*) (\w+)/x) {
        $level = $1;
        $subsystem = $2;
        $args{$subsystem} = [];
    } elsif ($subsystem && /\+\+ \Q$level\E \/ \Q$subsystem\E/x) {
        $level = $subsystem = undef;
    } elsif ($subsystem) {
        push(@{$args{$subsystem}},$_);
    } else {
        push(@args,$_);
    }
}
Getopt::Long::Configure(qw(bundling no_ignore_case pass_through require_order));
GetOptionsFromArray(
    \@args,
    "C=s" => \$C,
    "B=s" => \$B,
    "F=s" => \$F,
    'h|help' => \$help,
    'e=s' => \$e,
    'o=s' => \$output
) || help;
help if $help;


my $backend = $B // $C // 'mono';
my $compiler = Niecza::Simple::create_compiler(backend=>$backend);

my $source;
my $filename;
if ($e) {
    $source = $e;
    $filename = '-e';
} elsif (!@args) {
    die "no input file";
} else {
    $filename = shift(@args);
    $source = slurp($filename);
}

if ($C and $B) {
    die "You can't specify both -C and -B.\n";
}

if ($C) {
    $compiler->compile(source=>$source,filename=>$filename,output=>$output);
} else {
    $compiler->run(source=>decode('utf-8',$source),filename=>$filename);
}

